
package ai;

import gui.GUI;
import gui.MockGUI;

import java.util.LinkedList;
import java.util.Stack;

import model.Class;
import model.DoorDeckFactory;
import model.GM;
import model.Player;
import model.PlayerType;
import model.Race;
import model.TreasureDeckFactory;
import model.UnitTest;
import model.card.Card;
import model.card.ClassCard;
import model.card.CurseCard;
import model.card.EquipmentCard;
import model.card.GoUpLevelCard;
import model.card.ItemCard;
import model.card.MonsterCard;
import model.card.OtherDoorCard;
import model.card.OtherTreasureCard;
import model.card.RaceCard;
import model.card.TreasureCard;
import model.card.EquipmentCard.EquipmentType;

public class AIManagerTest extends UnitTest {
	private static final long serialVersionUID = 1L;
		
	private GUI mockGUI;
	private LinkedList<Player> players;
	
	private Player easy;
	private Player medium;
	private Player hard;
	private Player human;
	
	private MonsterCard tdemon;
	
	private CurseCard loseLevel;
	private CurseCard headChicken;
	private CurseCard loseHelm;
	private CurseCard mirror;
	private CurseCard changeSex;
	private CurseCard loseCards;
	private CurseCard tax;
	
	private EquipmentCard farmor;
	private EquipmentCard fstaff;
	private EquipmentCard fthrower;
	private EquipmentCard bow;
	private EquipmentCard hammer;
	private EquipmentCard helmet;
	private EquipmentCard ladder;
	private EquipmentCard noThief;
	private EquipmentCard noWarrior;
	private EquipmentCard noWizard;
	private EquipmentCard noCleric;
	private EquipmentCard maleOnly;
	private EquipmentCard femaleOnly;
	private EquipmentCard grater;
	private EquipmentCard cloak;
	private EquipmentCard shield;
	private EquipmentCard bandanna;
	private EquipmentCard swiss;
	private EquipmentCard rock;
	private EquipmentCard boots;
	private EquipmentCard sandals;
	private EquipmentCard tuba;
	private EquipmentCard powerHat;
	private EquipmentCard backsword;
		
	private ItemCard water;
	
	private OtherTreasureCard hireling;
		
	public int testAll() {
		initializeObjects();
		
		testGetLeastValuedHandCards();
		testGetLeastValuedItems();
		testGetLeastValuedGPItemList();
		testPlayHandCards();
		testEquipBest();
		testGetDeathCost();
		testGetRankedPlayers();
		testGetCurseCost();
		testGetBadStuffCost();
		
		return errorCount;
	}
	
	private void initializeObjects() {
		mockGUI = new MockGUI(0);
		
		easy = new Player(mockGUI, "easy", true, PlayerType.COMPUTER_EASY);
		medium = new Player(mockGUI, "medium", false, PlayerType.COMPUTER_MEDIUM);
		hard = new Player(mockGUI, "hard", true, PlayerType.COMPUTER_HARD);
		human = new Player(mockGUI, "human", false, PlayerType.HUMAN);
		players = new LinkedList<Player>();
		players.add(easy);
		players.add(medium);
		players.add(hard);
		players.add(human);
		GM.newTestGame(mockGUI, players);
		
		Stack<Card> doorDeck = DoorDeckFactory.buildDeck();
		for (Card card : doorDeck) {
			if (card.getID() == Card.M_TONGUE_DEMON) 
				tdemon = (MonsterCard)card;
			else if (card.getID() == Card.CU_LOSE_1_LEVEL_1)
				loseLevel = (CurseCard)card;
			else if (card.getID() == Card.CU_CHICKEN_ON_YOUR_HEAD)
				headChicken = (CurseCard)card;
			else if (card.getID() == Card.CU_LOSE_THE_HEADGEAR_YOU_ARE_WEARING)
				loseHelm = (CurseCard)card;
			else if (card.getID() == Card.CU_MALIGN_MIRROR)
				mirror = (CurseCard)card;
			else if (card.getID() == Card.CU_CHANGE_SEX)
				changeSex = (CurseCard)card;
			else if (card.getID() == Card.CU_LOSE_TWO_CARDS)
				loseCards = (CurseCard)card;
			else if (card.getID() == Card.CU_INCOME_TAX)
				tax = (CurseCard)card;
		}
		
		Stack<Card> treasureDeck = TreasureDeckFactory.buildDeck();
		for (Card card : treasureDeck) {
			if (card.getID() == Card.E_FLAMING_ARMOR)
				farmor = (EquipmentCard)card;
			else if (card.getID() == Card.E_STAFF_OF_NAPALM)
				fstaff = (EquipmentCard)card;
			else if (card.getID() == Card.E_FLAMETHROWER)
				fthrower = (EquipmentCard)card;
			else if (card.getID() == Card.E_BOW_WITH_RIBBONS)
				bow = (EquipmentCard)card;
			else if (card.getID() == Card.E_HAMMER_OF_KNEECAPPING)
				hammer = (EquipmentCard)card;
			else if (card.getID() == Card.E_HORNED_HELMET)
				helmet = (EquipmentCard)card;
			else if (card.getID() == Card.E_STEPLADDER)
				ladder = (EquipmentCard)card;
			else if (card.getID() == Card.E_SINGING_AND_DANCING_SWORD)
				noThief = (EquipmentCard)card;
			else if (card.getID() == Card.E_PANTYHOSE_OF_GIANT_STRENGTH)
				noWarrior = (EquipmentCard)card;
			else if (card.getID() == Card.E_MITHRIL_ARMOR)
				noWizard = (EquipmentCard)card;
			else if (card.getID() == Card.E_KNEEPADS_OF_ALLURE)
				noCleric = (EquipmentCard)card;
			else if (card.getID() == Card.E_GENTLEMENS_CLUB)
				maleOnly = (EquipmentCard)card;
			else if (card.getID() == Card.E_BROAD_SWORD)
				femaleOnly = (EquipmentCard)card;
			else if (card.getID() == Card.E_CHEESE_GRATER_OF_PEACE)
				grater = (EquipmentCard)card;
			else if (card.getID() == Card.E_CLOAK_OF_OBSCURITY)
				cloak = (EquipmentCard)card;
			else if (card.getID() == Card.E_SHIELD_OF_UBIQUITY)
				shield = (EquipmentCard)card;
			else if (card.getID() == Card.E_RAD_BANDANNA)
				bandanna = (EquipmentCard)card;
			else if (card.getID() == Card.E_SWISS_ARMY_POLEARM)
				swiss = (EquipmentCard)card;
			else if (card.getID() == Card.E_HUGE_ROCK)
				rock = (EquipmentCard)card;
			else if (card.getID() == Card.E_BOOTS_OF_RUNNING_REALLY_FAST)
				boots = (EquipmentCard)card;
			else if (card.getID() == Card.E_SANDALS_OF_PROTECTION)
				sandals = (EquipmentCard)card;
			else if (card.getID() == Card.E_TUBA_OF_CHARM)
				tuba = (EquipmentCard)card;
			else if (card.getID() == Card.E_POINTY_HAT_OF_POWER)
				powerHat = (EquipmentCard)card;
			else if (card.getID() == Card.E_SNEAKY_BACKSWORD)
				backsword = (EquipmentCard)card;
			else if (card.getID() == Card.I_YUPPIE_WATER)
				water = (ItemCard)card;
			else if (card.getID() == Card.OT_HIRELING)
				hireling = (OtherTreasureCard)card;
		}
	}
		
	private void testGetLeastValuedHandCards() {
		ItemCard item0 = new ItemCard(0, "item0", 0);
		ItemCard item1 = new ItemCard(1, "item1", 100);
		ItemCard item2 = new ItemCard(2, "item2", 200);
		ItemCard item3 = new ItemCard(3, "item3", 0, 3);
		ItemCard item4 = new ItemCard(4, "item4", 300, 4);
		ItemCard item5 = new ItemCard(5, "item5", 500, 4);
		ItemCard item5_0 = new ItemCard(50, "item5_0", 500, 3);
		ItemCard item5_2 =  new ItemCard(52, "item5_2", 500, 5);
		GoUpLevelCard level = new GoUpLevelCard(10, "level");
		
		assertEquals(AIManager.getLeastValuedHandCards(easy).size(), 0);
		easy.addCard(item1);
		LinkedList<AIValuedCard> leastValuedCards = AIManager.getLeastValuedHandCards(easy);
		assertEquals(leastValuedCards.size(), 1);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 1);
		easy.addCard(item3);
		leastValuedCards = AIManager.getLeastValuedHandCards(easy);
		assertEquals(leastValuedCards.size(), 2);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 1);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 3);
		easy.addCard(item2);
		leastValuedCards = AIManager.getLeastValuedHandCards(easy);
		assertEquals(leastValuedCards.size(), 3);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 1);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 3);
		easy.addCard(item5);
		leastValuedCards = AIManager.getLeastValuedHandCards(easy);
		assertEquals(leastValuedCards.size(), 4);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 1);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 5);
		easy.addCard(item0);
		leastValuedCards = AIManager.getLeastValuedHandCards(easy);
		assertEquals(leastValuedCards.size(), 5);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 1);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(4).getCard().getID(), 5);
		easy.addCard(level);
		leastValuedCards = AIManager.getLeastValuedHandCards(easy);
		assertEquals(leastValuedCards.size(), 6);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 1);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(4).getCard().getID(), 5);
		assertEquals(leastValuedCards.get(5).getCard().getID(), 10);
		easy.addCard(item4);
		leastValuedCards = AIManager.getLeastValuedHandCards(easy);
		assertEquals(leastValuedCards.size(), 7);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 1);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(4).getCard().getID(), 4);
		assertEquals(leastValuedCards.get(5).getCard().getID(), 5);
		assertEquals(leastValuedCards.get(6).getCard().getID(), 10);
		easy.addCard(item5_2);
		leastValuedCards = AIManager.getLeastValuedHandCards(easy);
		assertEquals(leastValuedCards.size(), 8);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 1);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(4).getCard().getID(), 4);
		assertEquals(leastValuedCards.get(5).getCard().getID(), 5);
		assertEquals(leastValuedCards.get(6).getCard().getID(), 52);
		assertEquals(leastValuedCards.get(7).getCard().getID(), 10);
		easy.addCard(item5_0);
		leastValuedCards = AIManager.getLeastValuedHandCards(easy);
		assertEquals(leastValuedCards.size(), 9);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 1);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(4).getCard().getID(), 4);
		assertEquals(leastValuedCards.get(5).getCard().getID(), 50);
		assertEquals(leastValuedCards.get(6).getCard().getID(), 5);
		assertEquals(leastValuedCards.get(7).getCard().getID(), 52);
		assertEquals(leastValuedCards.get(8).getCard().getID(), 10);
		easy.getHandCards().clear();
		assertEquals(AIManager.getLeastValuedHandCards(easy).size(), 0);
	}
	
	private void testGetLeastValuedItems() {
		ItemCard item0 = new ItemCard(0, "item0", 0);
		ItemCard item1 = new ItemCard(1, "item1", 100);
		EquipmentCard equip2 = new EquipmentCard(2, "equip2", 200, 0, EquipmentType.OTHER, false, false, false);
		ItemCard item3 = new ItemCard(3, "item3", 0, 3);
		EquipmentCard equip4 = new EquipmentCard(4, "equip4", 300, 1, EquipmentType.OTHER, false, false, false);
		ItemCard item4_1 = new ItemCard(41, "item4_1", 400, 1);
		ItemCard item4_2 =  new ItemCard(42, "item4_2", 200, 4);
		EquipmentCard equip8 = new EquipmentCard(8, "equip4", 700, 2, EquipmentType.OTHER, false, false, false);
		
		assertEquals(AIManager.getLeastValuedItems(medium, medium.getHandCards()).size(), 0);
		medium.getEquippedItems().add(equip2);
		medium.addCard(item0);
		LinkedList<AIValuedCard> leastValuedCards = AIManager.getLeastValuedItems(medium, medium.getHandCards());
		assertEquals(leastValuedCards.size(), 1);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 2);
		medium.addItem(item0);
		leastValuedCards = AIManager.getLeastValuedItems(medium, medium.getHandCards());
		assertEquals(leastValuedCards.size(), 2);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 2);
		medium.addItem(item3);
		leastValuedCards = AIManager.getLeastValuedItems(medium, medium.getHandCards());
		assertEquals(leastValuedCards.size(), 3);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 3);
		medium.addUnequippedItem(equip8);
		leastValuedCards = AIManager.getLeastValuedItems(medium, medium.getHandCards());
		assertEquals(leastValuedCards.size(), 4);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 8);
		medium.addItem(item4_1);
		leastValuedCards = AIManager.getLeastValuedItems(medium, medium.getHandCards());
		assertEquals(leastValuedCards.size(), 5);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 41);
		assertEquals(leastValuedCards.get(4).getCard().getID(), 8);
		medium.addItem(item4_2);
		leastValuedCards = AIManager.getLeastValuedItems(medium, medium.getHandCards());
		assertEquals(leastValuedCards.size(), 6);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 41);
		assertEquals(leastValuedCards.get(4).getCard().getID(), 42);
		assertEquals(leastValuedCards.get(5).getCard().getID(), 8);
		medium.addUnequippedItem(equip4);
		leastValuedCards = AIManager.getLeastValuedItems(medium, medium.getHandCards());
		assertEquals(leastValuedCards.size(), 7);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 4);
		assertEquals(leastValuedCards.get(4).getCard().getID(), 41);
		assertEquals(leastValuedCards.get(5).getCard().getID(), 42);
		assertEquals(leastValuedCards.get(6).getCard().getID(), 8);
		medium.equip(equip4);
		medium.addItem(item1);
		leastValuedCards = AIManager.getLeastValuedItems(medium, medium.getHandCards());
		assertEquals(leastValuedCards.size(), 8);
		assertEquals(leastValuedCards.get(0).getCard().getID(), 0);
		assertEquals(leastValuedCards.get(1).getCard().getID(), 1);
		assertEquals(leastValuedCards.get(2).getCard().getID(), 2);
		assertEquals(leastValuedCards.get(3).getCard().getID(), 3);
		assertEquals(leastValuedCards.get(4).getCard().getID(), 4);
		assertEquals(leastValuedCards.get(5).getCard().getID(), 41);
		assertEquals(leastValuedCards.get(6).getCard().getID(), 42);
		assertEquals(leastValuedCards.get(7).getCard().getID(), 8);
		medium.getCarriedItems().clear();
		medium.getUnequippedItems().clear();
		medium.getEquippedItems().clear();
		medium.getHandCards().clear();
		assertEquals(AIManager.getLeastValuedItems(medium, medium.getHandCards()).size(), 0);
	}
	
	private void testGetLeastValuedGPItemList() {
		ItemCard item0 = new ItemCard(0, "item0", 0);
		ItemCard item1 = new ItemCard(1, "item1", 100, 0);
		ItemCard item2 = new ItemCard(2, "item2", 100, 2);
		ItemCard item3 = new ItemCard(3, "item3", 300, 3);
		ItemCard item4 = new ItemCard(4, "item4", 400, 4);
		ItemCard item5 = new ItemCard(5, "item5", 100, 5);
		ItemCard item5_0 = new ItemCard(50, "item5_0", 500, 8);
		ItemCard item5_1 = new ItemCard(51, "item5_1", 500, 9);
		ItemCard item5_2 = new ItemCard(52, "item5_2", 500, 10);
		ItemCard item99 = new ItemCard(99, "item99", 200, 99);
		
		LinkedList<TreasureCard> allItems = new LinkedList<TreasureCard>();
		LinkedList<TreasureCard> resultItems = AIManager.getLeastValuedGPItemList(allItems, 0, hard, hard.getHandCards());
		assertNull(resultItems);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 100, hard, hard.getHandCards());
		assertNull(resultItems);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1000, hard, hard.getHandCards());
		assertNull(resultItems);
		
		allItems.add(item1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 0, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 1);
		assertEquals(resultItems.get(0).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 100, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 1);
		assertEquals(resultItems.get(0).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 101, hard, hard.getHandCards());
		assertNull(resultItems);
		
		allItems.add(item0);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 0, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 1);
		assertEquals(resultItems.get(0).getID(), 0);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 100, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 1);
		assertEquals(resultItems.get(0).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 101, hard, hard.getHandCards());
		assertNull(resultItems);
		
		allItems.add(item2);
		allItems.add(item99);
		allItems.add(item3);
		allItems.add(item4);
		allItems.add(item5_1);
		allItems.add(item5_2);
		allItems.add(item5);
		allItems.add(item5_0);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 0, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 1);
		assertEquals(resultItems.get(0).getID(), 0);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 100, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 1);
		assertEquals(resultItems.get(0).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 101, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 2);
		assertEquals(resultItems.get(0).getID(), 1);
		assertEquals(resultItems.get(1).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 200, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 2);
		assertEquals(resultItems.get(0).getID(), 1);
		assertEquals(resultItems.get(1).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 201, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 1);
		assertEquals(resultItems.get(0).getID(), 3);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 300, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 1);
		assertEquals(resultItems.get(0).getID(), 3);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 301, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 2);
		assertEquals(resultItems.get(0).getID(), 3);
		assertEquals(resultItems.get(1).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 400, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 2);
		assertEquals(resultItems.get(0).getID(), 3);
		assertEquals(resultItems.get(1).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 401, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 2);
		assertEquals(resultItems.get(0).getID(), 4);
		assertEquals(resultItems.get(1).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 500, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 2);
		assertEquals(resultItems.get(0).getID(), 4);
		assertEquals(resultItems.get(1).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 501, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 3);
		assertEquals(resultItems.get(0).getID(), 4);
		assertEquals(resultItems.get(1).getID(), 1);
		assertEquals(resultItems.get(2).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 600, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 3);
		assertEquals(resultItems.get(0).getID(), 4);
		assertEquals(resultItems.get(1).getID(), 1);
		assertEquals(resultItems.get(2).getID(), 2);		
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 601, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 2);
		assertEquals(resultItems.get(0).getID(), 4);
		assertEquals(resultItems.get(1).getID(), 3);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 700, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 2);
		assertEquals(resultItems.get(0).getID(), 4);
		assertEquals(resultItems.get(1).getID(), 3);		
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 701, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 3);		
		assertEquals(resultItems.get(0).getID(), 4);
		assertEquals(resultItems.get(1).getID(), 3);
		assertEquals(resultItems.get(2).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 800, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 3);		
		assertEquals(resultItems.get(0).getID(), 4);
		assertEquals(resultItems.get(1).getID(), 3);
		assertEquals(resultItems.get(2).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 801, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 4);		
		assertEquals(resultItems.get(0).getID(), 4);
		assertEquals(resultItems.get(1).getID(), 3);
		assertEquals(resultItems.get(2).getID(), 1);
		assertEquals(resultItems.get(3).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 900, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 4);		
		assertEquals(resultItems.get(0).getID(), 4);
		assertEquals(resultItems.get(1).getID(), 3);
		assertEquals(resultItems.get(2).getID(), 1);
		assertEquals(resultItems.get(3).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 901, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 3);		
		assertEquals(resultItems.get(0).getID(), 50);
		assertEquals(resultItems.get(1).getID(), 4);
		assertEquals(resultItems.get(2).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1000, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 3);		
		assertEquals(resultItems.get(0).getID(), 50);
		assertEquals(resultItems.get(1).getID(), 4);
		assertEquals(resultItems.get(2).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1001, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 4);		
		assertEquals(resultItems.get(0).getID(), 50);
		assertEquals(resultItems.get(1).getID(), 4);
		assertEquals(resultItems.get(2).getID(), 1);
		assertEquals(resultItems.get(3).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1100, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 4);		
		assertEquals(resultItems.get(0).getID(), 50);
		assertEquals(resultItems.get(1).getID(), 4);
		assertEquals(resultItems.get(2).getID(), 1);
		assertEquals(resultItems.get(3).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1101, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 3);		
		assertEquals(resultItems.get(0).getID(), 50);
		assertEquals(resultItems.get(1).getID(), 4);
		assertEquals(resultItems.get(2).getID(), 3);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1200, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 3);		
		assertEquals(resultItems.get(0).getID(), 50);
		assertEquals(resultItems.get(1).getID(), 4);
		assertEquals(resultItems.get(2).getID(), 3);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1300, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 4);		
		assertEquals(resultItems.get(0).getID(), 50);
		assertEquals(resultItems.get(1).getID(), 4);
		assertEquals(resultItems.get(2).getID(), 3);
		assertEquals(resultItems.get(3).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1400, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 5);		
		assertEquals(resultItems.get(0).getID(), 50);
		assertEquals(resultItems.get(1).getID(), 4);
		assertEquals(resultItems.get(2).getID(), 3);
		assertEquals(resultItems.get(3).getID(), 1);
		assertEquals(resultItems.get(4).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1401, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 4);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 50);
		assertEquals(resultItems.get(2).getID(), 4);
		assertEquals(resultItems.get(3).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1500, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 4);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 50);
		assertEquals(resultItems.get(2).getID(), 4);
		assertEquals(resultItems.get(3).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1600, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 5);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 50);
		assertEquals(resultItems.get(2).getID(), 4);
		assertEquals(resultItems.get(3).getID(), 1);
		assertEquals(resultItems.get(4).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1700, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 4);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 50);
		assertEquals(resultItems.get(2).getID(), 4);
		assertEquals(resultItems.get(3).getID(), 3);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1900, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 6);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 50);
		assertEquals(resultItems.get(2).getID(), 4);
		assertEquals(resultItems.get(3).getID(), 3);
		assertEquals(resultItems.get(4).getID(), 1);
		assertEquals(resultItems.get(5).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 1901, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 5);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 52);
		assertEquals(resultItems.get(2).getID(), 50);
		assertEquals(resultItems.get(3).getID(), 4);
		assertEquals(resultItems.get(4).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 2000, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 5);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 52);
		assertEquals(resultItems.get(2).getID(), 50);
		assertEquals(resultItems.get(3).getID(), 4);
		assertEquals(resultItems.get(4).getID(), 1);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 2301, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 7);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 52);
		assertEquals(resultItems.get(2).getID(), 50);
		assertEquals(resultItems.get(3).getID(), 4);
		assertEquals(resultItems.get(4).getID(), 3);
		assertEquals(resultItems.get(5).getID(), 1);
		assertEquals(resultItems.get(6).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 2400, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 7);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 52);
		assertEquals(resultItems.get(2).getID(), 50);
		assertEquals(resultItems.get(3).getID(), 4);
		assertEquals(resultItems.get(4).getID(), 3);
		assertEquals(resultItems.get(5).getID(), 1);
		assertEquals(resultItems.get(6).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 2401, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 8);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 52);
		assertEquals(resultItems.get(2).getID(), 50);
		assertEquals(resultItems.get(3).getID(), 4);
		assertEquals(resultItems.get(4).getID(), 3);
		assertEquals(resultItems.get(5).getID(), 1);
		assertEquals(resultItems.get(6).getID(), 2);
		assertEquals(resultItems.get(7).getID(), 5);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 2500, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 8);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 52);
		assertEquals(resultItems.get(2).getID(), 50);
		assertEquals(resultItems.get(3).getID(), 4);
		assertEquals(resultItems.get(4).getID(), 3);
		assertEquals(resultItems.get(5).getID(), 1);
		assertEquals(resultItems.get(6).getID(), 2);
		assertEquals(resultItems.get(7).getID(), 5);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 2501, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 8);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 52);
		assertEquals(resultItems.get(2).getID(), 50);
		assertEquals(resultItems.get(3).getID(), 4);
		assertEquals(resultItems.get(4).getID(), 3);
		assertEquals(resultItems.get(5).getID(), 99);
		assertEquals(resultItems.get(6).getID(), 1);
		assertEquals(resultItems.get(7).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 2600, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 8);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 52);
		assertEquals(resultItems.get(2).getID(), 50);
		assertEquals(resultItems.get(3).getID(), 4);
		assertEquals(resultItems.get(4).getID(), 3);
		assertEquals(resultItems.get(5).getID(), 99);
		assertEquals(resultItems.get(6).getID(), 1);
		assertEquals(resultItems.get(7).getID(), 2);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 2601, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 9);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 52);
		assertEquals(resultItems.get(2).getID(), 50);
		assertEquals(resultItems.get(3).getID(), 4);
		assertEquals(resultItems.get(4).getID(), 3);
		assertEquals(resultItems.get(5).getID(), 99);
		assertEquals(resultItems.get(6).getID(), 1);
		assertEquals(resultItems.get(7).getID(), 2);
		assertEquals(resultItems.get(8).getID(), 5);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 2700, hard, hard.getHandCards());
		assertEquals(resultItems.size(), 9);
		assertEquals(resultItems.get(0).getID(), 51);
		assertEquals(resultItems.get(1).getID(), 52);
		assertEquals(resultItems.get(2).getID(), 50);
		assertEquals(resultItems.get(3).getID(), 4);
		assertEquals(resultItems.get(4).getID(), 3);
		assertEquals(resultItems.get(5).getID(), 99);
		assertEquals(resultItems.get(6).getID(), 1);
		assertEquals(resultItems.get(7).getID(), 2);
		assertEquals(resultItems.get(8).getID(), 5);
		resultItems = AIManager.getLeastValuedGPItemList(allItems, 2701, hard, hard.getHandCards());
		assertNull(resultItems);
	}
	
	private void testPlayHandCards() {
		RaceCard elf = new RaceCard(1, "Elf", Race.ELF);
		RaceCard halfling = new RaceCard(2, "Halfling", Race.HALFLING);
		RaceCard dwarf = new RaceCard(3, "Dwarf", Race.DWARF);
		OtherDoorCard halfbreed = new OtherDoorCard(Card.OD_HALF_BREED_1, "Half-Breed");
		ClassCard warrior = new ClassCard(4, "Warrior", Class.WARRIOR);
		ClassCard wizard = new ClassCard(5, "Wizard", Class.WIZARD);
		ClassCard thief = new ClassCard(6, "Thief", Class.THIEF);
		ClassCard cleric = new ClassCard(7, "Cleric", Class.CLERIC);
		OtherDoorCard munchkin = new OtherDoorCard(Card.OD_SUPER_MUNCHKIN_1, "Super Munchkin");
		
		assertTrue(easy.getHandCards().isEmpty());
		AIManager.playHandCards(easy);
		AIManager.playHandCards(easy, new LinkedList<Card>());
		
		// Play Race Cards
		easy.addCard(halfling);
		easy.addRaceCard(halfling);
		AIManager.playHandCard(easy, halfling);
		assertFalse(easy.getHandCards().isEmpty());
		easy.getRaceCards().clear();
		assertFalse(easy.isHalfling());
		easy.addClassCard(wizard);
		AIManager.playHandCard(easy, halfling);
		assertFalse(easy.getHandCards().isEmpty());
		assertFalse(easy.isHalfling());
		easy.addUnequippedItem(ladder);
		AIManager.playHandCard(easy, halfling);
		assertTrue(easy.getHandCards().isEmpty());
		assertTrue(easy.isHalfling());
		assertTrue(easy.getEquippedItems().isEmpty());
		easy.getUnequippedItems().clear();
		easy.getClassCards().clear();
		easy.getRaceCards().clear();
		easy.addCard(halfling);
		easy.getEquippedItems().add(swiss);
		AIManager.playHandCard(easy, halfling);
		assertFalse(easy.getHandCards().isEmpty());
		assertFalse(easy.isHalfling());
		easy.getEquippedItems().remove(swiss);
		AIManager.playHandCard(easy, halfling);
		assertTrue(easy.getHandCards().isEmpty());
		assertTrue(easy.isHalfling());
		
		easy.setHalfBreedCard(halfbreed);
		easy.addCard(dwarf);
		assertFalse(easy.isDwarf());
		easy.getEquippedItems().add(ladder);
		AIManager.playHandCard(easy, dwarf);
		assertTrue(easy.isHalfling());
		assertTrue(easy.getHandCards().isEmpty());
		assertTrue(easy.isDwarf());
		easy.addCard(dwarf);
		AIManager.playHandCard(easy, dwarf);
		assertFalse(easy.getHandCards().isEmpty());
		easy.getRaceCards().remove(dwarf);		
		easy.getEquippedItems().add(bandanna);
		AIManager.playHandCard(easy, dwarf);
		assertTrue(easy.isHalfling());
		assertFalse(easy.getHandCards().isEmpty());
		assertFalse(easy.isDwarf());
		easy.getEquippedItems().clear();
		AIManager.playHandCard(easy, dwarf);
		assertFalse(easy.isHalfling());
		assertTrue(easy.getHandCards().isEmpty());
		assertTrue(easy.isDwarf());
		
		easy.addCard(halfling);
		easy.addCard(elf);
		AIManager.playHandCard(easy, halfling);
		assertFalse(easy.isHalfling());
		assertFalse(easy.isElf());
		assertEquals(easy.getHandCards().size(), 2);
		assertTrue(easy.isDwarf());
		AIManager.playHandCards(easy);
		assertFalse(easy.isHalfling());
		assertTrue(easy.isDwarf());
		assertTrue(easy.isElf());
		assertEquals(easy.getHandCards().size(), 1);
		AIManager.playHandCard(easy, halfling);
		assertFalse(easy.isHalfling());
		assertTrue(easy.isDwarf());
		assertTrue(easy.isElf());
		assertEquals(easy.getHandCards().size(), 1);
		easy.addUnequippedItem(ladder);
		AIManager.playHandCard(easy, halfling);
		assertTrue(easy.isHalfling());
		assertFalse(easy.isDwarf());
		assertTrue(easy.isElf());
		assertEquals(easy.getHandCards().size(), 0);
		easy.addCard(new RaceCard(8, "Halfing2", Race.HALFLING));
		easy.addCard(elf);
		easy.addCard(dwarf);
		easy.getUnequippedItems().clear();
		AIManager.playHandCards(easy);
		assertFalse(easy.isHalfling());
		assertTrue(easy.isDwarf());
		assertTrue(easy.isElf());
		assertEquals(easy.getHandCards().size(), 2);
		easy.getHandCards().clear();
		easy.discardRaceCard(dwarf);
		easy.addCard(elf);
		AIManager.playHandCards(easy);
		assertFalse(easy.isHalfling());
		assertFalse(easy.isDwarf());
		assertTrue(easy.isElf());
		assertEquals(easy.getHandCards().size(), 1);
		easy.getHandCards().clear();
		easy.getRaceCards().clear();
		easy.setHalfBreedCard(null);
		
		easy.addCard(halfbreed);
		easy.addCard(elf);
		easy.addCard(dwarf);
		easy.addCard(halfling);
		AIManager.playHandCards(easy);
		assertTrue(easy.isHalfBreed());
		assertFalse(easy.isHalfling());
		assertTrue(easy.isDwarf());
		assertTrue(easy.isElf());
		assertEquals(easy.getHandCards().size(), 1);
		easy.getHandCards().clear();
		easy.getRaceCards().clear();
		easy.setHalfBreedCard(null);
		
		// Play Class Cards
		easy.addCard(warrior);
		easy.addClassCard(warrior);
		AIManager.playHandCard(easy, warrior);
		assertFalse(easy.getHandCards().isEmpty());
		easy.getClassCards().clear();
		assertFalse(easy.isWarrior());
		easy.addClassCard(wizard);
		AIManager.playHandCard(easy, warrior);
		assertFalse(easy.getHandCards().isEmpty());
		assertFalse(easy.isWarrior());
		easy.getClassCards().clear();
		easy.addCard(wizard);
		AIManager.playHandCard(easy, warrior);
		assertEquals(easy.getHandCards().size(), 1);
		assertTrue(easy.isWarrior());
		
		AIManager.playHandCard(easy, wizard);
		assertEquals(easy.getHandCards().size(), 1);
		assertTrue(easy.isWarrior());
		assertFalse(easy.isWizard());
		easy.addUnequippedItem(fstaff);
		AIManager.playHandCard(easy, wizard);
		assertEquals(easy.getHandCards().size(), 0);
		assertFalse(easy.isWarrior());
		assertTrue(easy.isWizard());
		easy.addCard(wizard);
		AIManager.playHandCard(easy, wizard);
		assertEquals(easy.getHandCards().size(), 1);
		assertFalse(easy.isWarrior());
		assertTrue(easy.isWizard());
				
		easy.getHandCards().clear();
		easy.setSuperMunchkinCard(munchkin);
		easy.addClassCard(thief);
		easy.addCard(thief);
		AIManager.playHandCard(easy, thief);
		assertTrue(easy.isWizard());
		assertFalse(easy.getHandCards().isEmpty());
		assertTrue(easy.isThief());
		easy.getHandCards().clear();
				
		LinkedList<Card> cardList = new LinkedList<Card>();
		cardList.add(warrior);
		cardList.add(cleric);
		easy.addCard(warrior);
		easy.addCard(cleric);
		AIManager.playHandCards(easy, cardList);
		assertFalse(easy.isWarrior());
		assertTrue(easy.isWizard());
		assertTrue(easy.isThief());
		assertFalse(easy.isCleric());
		assertEquals(easy.getHandCards().size(), 2);
		assertTrue(easy.isSuperMunchkin());
		easy.addUnequippedItem(grater);
		AIManager.playHandCards(easy, cardList);
		assertFalse(easy.isWarrior());
		assertTrue(easy.isWizard());
		assertFalse(easy.isThief());
		assertTrue(easy.isCleric());
		assertEquals(easy.getHandCards().size(), 1);
		assertTrue(easy.isSuperMunchkin());
		easy.getHandCards().clear();
		
		easy.addCard(new ClassCard(9, "Wizard2", Class.WIZARD));
		easy.addCard(new ClassCard(10, "Warrior2", Class.WARRIOR));
		easy.addCard(new ClassCard(11, "Thief2", Class.THIEF));
		easy.addCard(new ClassCard(12, "Cleric2", Class.CLERIC));
		easy.getUnequippedItems().clear();
		easy.addUnequippedItem(noWizard);
		easy.addUnequippedItem(cloak);
		AIManager.playHandCards(easy);
		assertFalse(easy.isWarrior());
		assertFalse(easy.isWizard());
		assertTrue(easy.isThief());
		assertTrue(easy.isCleric());
		assertEquals(easy.getHandCards().size(), 3);
		easy.addCard(thief);
		easy.getUnequippedItems().clear();
		easy.addUnequippedItem(noCleric);
		easy.addUnequippedItem(fstaff);
		easy.addUnequippedItem(shield);
		AIManager.playHandCards(easy);
		assertTrue(easy.isWarrior());
		assertTrue(easy.isWizard());
		assertFalse(easy.isThief());
		assertFalse(easy.isCleric());
		assertEquals(easy.getHandCards().size(), 2);
		
		easy.getHandCards().clear();
		easy.getClassCards().clear();
		easy.setSuperMunchkinCard(null);
		
		easy.addCard(warrior);
		easy.addCard(wizard);
		easy.addCard(munchkin);
		easy.addCard(thief);
		easy.getUnequippedItems().clear();
		easy.getEquippedItems().add(noWarrior);
		AIManager.playHandCards(easy);
		assertTrue(easy.isSuperMunchkin());
		assertFalse(easy.isWarrior());
		assertTrue(easy.isWizard());
		assertTrue(easy.isThief());
		assertFalse(easy.isCleric());
		assertEquals(easy.getHandCards().size(), 1);
		easy.getEquippedItems().clear();
		easy.getUnequippedItems().clear();
		easy.getHandCards().clear();
		easy.getClassCards().clear();
		easy.setSuperMunchkinCard(null);		
		easy.addClassCard(cleric);
		easy.addCard(warrior);
		easy.addCard(wizard);
		easy.addCard(munchkin);
		easy.addCard(thief);
		easy.getUnequippedItems().clear();
		AIManager.playHandCards(easy);
		assertTrue(easy.isSuperMunchkin());
		assertTrue(easy.isWarrior());
		assertFalse(easy.isWizard());
		assertFalse(easy.isThief());
		assertTrue(easy.isCleric());
		assertEquals(easy.getHandCards().size(), 2);
		easy.getEquippedItems().clear();
		easy.getUnequippedItems().clear();
		easy.getHandCards().clear();
		easy.getClassCards().clear();
		easy.setSuperMunchkinCard(null);
		
		ItemCard item1 = new ItemCard(21, "Item1", 100);
		ItemCard item2 = new ItemCard(22, "Item2", 200, 1);
		ItemCard item3 = new ItemCard(23, "Item3", 101, 5);
		players.remove(human);
		GM.newTestGame(mockGUI, players);
		
		// Play Curse Cards
		medium.goUpLevels(4, false);
		easy.goUpLevels(2, false);
		hard.goUpLevel(false);
		easy.addCard(tax);
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 1);
		medium.addItem(item2);
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(medium.getAllItems().size(), 1);
		hard.addItem(item2);
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(medium.getAllItems().size(), 1);
		assertEquals(hard.getAllItems().size(), 1);
		easy.addItem(item2);
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getAllItems().size(), 1);
		assertEquals(medium.getAllItems().size(), 1); 
		assertEquals(hard.getAllItems().size(), 1);
		medium.getCarriedItems().clear();
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getAllItems().size(), 0);
		assertEquals(medium.getAllItems().size(), 0);
		assertEquals(hard.getAllItems().size(), 0);
		assertEquals(easy.getLevel(), 3);
		assertEquals(medium.getLevel(), 4);
		assertEquals(hard.getLevel(), 2);
		easy.addCard(tax);
		medium.goUpLevel(false);
		easy.addItem(item2);
		medium.addItem(item2);
		hard.addItem(item1);
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getAllItems().size(), 0);
		assertEquals(medium.getAllItems().size(), 0);
		assertEquals(hard.getAllItems().size(), 0);
		assertEquals(easy.getLevel(), 3);
		assertEquals(medium.getLevel(), 5);
		assertEquals(hard.getLevel(), 1);
		easy.addCard(tax);
		easy.addItem(item2);
		medium.addItem(item2);
		hard.addItem(item1);
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getAllItems().size(), 1);
		assertEquals(medium.getAllItems().size(), 1);
		assertEquals(hard.getAllItems().size(), 1);
		easy.getCarriedItems().set(0, item1);
		medium.getCarriedItems().set(0, item1);
		hard.getCarriedItems().set(0, item2);
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getAllItems().size(), 1);
		assertEquals(medium.getAllItems().size(), 1);
		assertEquals(hard.getAllItems().size(), 1);
		easy.addItem(item3);
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 0); 
		assertEquals(easy.getAllItems().size(), 0);
		assertEquals(medium.getAllItems().size(), 0);
		assertEquals(hard.getAllItems().size(), 0); 
		assertEquals(easy.getLevel(), 3);
		assertEquals(medium.getLevel(), 4);
		assertEquals(hard.getLevel(), 1);
		medium.goUpLevel(false);
		easy.addCard(tax);
		easy.addItem(item1);
		medium.addItem(item3);
		hard.addItem(item3);
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 1); 
		assertEquals(easy.getAllItems().size(), 1);
		assertEquals(medium.getAllItems().size(), 1);
		assertEquals(hard.getAllItems().size(), 1);
		easy.getCarriedItems().set(0, item2);
		AIManager.playHandCard(easy, tax);
		assertEquals(easy.getHandCards().size(), 0); 
		assertEquals(easy.getAllItems().size(), 0);
		assertEquals(medium.getAllItems().size(), 0);
		assertEquals(hard.getAllItems().size(), 0);
		assertEquals(easy.getLevel(), 3);
		assertEquals(medium.getLevel(), 4);
		assertEquals(hard.getLevel(), 1);
		
		medium.goUpLevel(false);
		hard.goUpLevel(false);
		easy.addCard(loseLevel);
		medium.addCard(loseLevel);
		hard.addCard(loseLevel);
		AIManager.playHandCard(easy, loseLevel);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getLevel(), 3);
		assertEquals(medium.getLevel(), 4);
		assertEquals(hard.getLevel(), 2);
		easy.addCard(loseLevel);
		AIManager.playHandCard(easy, loseLevel);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getLevel(), 3);
		assertEquals(medium.getLevel(), 3);
		assertEquals(hard.getLevel(), 2);
		easy.addCard(loseLevel);
		AIManager.playHandCard(easy, loseLevel);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getLevel(), 3);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 2);
		easy.addCard(loseLevel);
		AIManager.playHandCard(easy, loseLevel);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getLevel(), 3);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 2);
		AIManager.playHandCard(medium, loseLevel);
		assertEquals(medium.getHandCards().size(), 0);
		assertEquals(easy.getLevel(), 2);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 2);
		medium.addCard(loseLevel);
		AIManager.playHandCard(medium, loseLevel);
		assertEquals(medium.getHandCards().size(), 0);
		assertEquals(easy.getLevel(), 2);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 1);
		medium.addCard(loseLevel);
		AIManager.playHandCard(medium, loseLevel);
		assertEquals(medium.getHandCards().size(), 0);
		assertEquals(easy.getLevel(), 1);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 1);
		medium.addCard(loseLevel);
		AIManager.playHandCard(medium, loseLevel);
		assertEquals(medium.getHandCards().size(), 1);
		assertEquals(easy.getLevel(), 1);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 1);
		easy.getHandCards().clear();
		medium.getHandCards().clear();
		hard.getHandCards().clear();
		hard.goUpLevels(2, false);
		medium.addCard(loseHelm);
		AIManager.playHandCard(medium, loseHelm);
		assertEquals(medium.getHandCards().size(), 1);
		medium.addLastingCurse(headChicken);
		assertTrue(medium.hasChickenOnHead());
		AIManager.playHandCard(medium, loseHelm);
		assertEquals(medium.getHandCards().size(), 0);
		assertFalse(medium.hasChickenOnHead());
		medium.addCard(loseHelm);
		medium.addLastingCurse(headChicken);
		medium.getEquippedItems().add(helmet);
		AIManager.playHandCard(medium, loseHelm);
		assertEquals(medium.getHandCards().size(), 1);
		assertEquals(medium.getAllEquipment().size(), 1);
		assertTrue(medium.hasChickenOnHead());
		medium.getEquippedItems().clear();
		easy.getEquippedItems().add(helmet);
		AIManager.playHandCard(medium, loseHelm);
		assertEquals(medium.getHandCards().size(), 0);
		assertFalse(medium.hasChickenOnHead());
		assertEquals(easy.getAllEquipment().size(), 1);
		medium.addCard(loseHelm);
		medium.addLastingCurse(headChicken);
		easy.addRaceCard(elf);
		AIManager.playHandCard(medium, loseHelm);
		assertEquals(medium.getHandCards().size(), 0);
		assertTrue(medium.hasChickenOnHead());
		assertEquals(easy.getAllEquipment().size(), 0);
		medium.getEquippedItems().add(helmet);
		easy.addCard(loseHelm);
		AIManager.playHandCard(easy, loseHelm);
		assertEquals(easy.getHandCards().size(), 0);
		assertFalse(medium.hasChickenOnHead());
		assertEquals(medium.getAllEquipment().size(), 0);		
		easy.goDownLevels(10);
		medium.goDownLevels(10);
		hard.goDownLevels(10);
		players.add(human);
		GM.newTestGame(mockGUI, players);
		easy.addCard(loseCards);
		AIManager.playHandCard(easy, loseCards);
		assertEquals(easy.getHandCards().size(), 1);
		easy.addCard(item1);
		AIManager.playHandCard(easy, loseCards);
		assertEquals(easy.getHandCards().size(), 2);
		easy.addCard(item2);
		AIManager.playHandCard(easy, loseCards);
		assertEquals(easy.getHandCards().size(), 3);
		easy.getHandCards().clear();
		easy.getRaceCards().clear();
		
		// Play Equipment Cards
		EquipmentCard equip0 = new EquipmentCard(20, "E0", 0, 0, EquipmentType.OTHER, false, false, false);
		EquipmentCard equip1 = new EquipmentCard(21, "E1", 100, 0, EquipmentType.OTHER, false, false, false);
		EquipmentCard equip4 = new EquipmentCard(24, "E4", 400, 1, EquipmentType.OTHER, false, false, false);
		easy.addCard(equip0);
		easy.addCard(equip1);
		easy.addCard(equip4);
		AIManager.playHandCard(easy, equip0);
		assertEquals(easy.getHandCards().size(), 3);
		assertEquals(easy.getEquippedItems().size(), 0);
		AIManager.playHandCard(easy, equip1);
		assertEquals(easy.getHandCards().size(), 2);
		assertEquals(easy.getEquippedItems().size(), 1);
		AIManager.playHandCard(easy, equip4);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getEquippedItems().size(), 2);
		easy.getHandCards().clear();
		easy.addCard(tuba);
		easy.addCard(ladder);
		easy.addCard(rock);
		AIManager.playHandCards(easy);
		AIManager.playHandCard(easy, tuba);
		AIManager.playHandCard(easy, ladder);
		assertEquals(easy.getHandCards().size(), 2);
		assertEquals(easy.getEquippedItems().size(), 3);
		assertTrue(easy.hasEquipped(rock));
		easy.addCard(boots);
		easy.addCard(sandals);
		AIManager.playHandCards(easy);
		assertEquals(easy.getHandCards().size(), 2);
		assertEquals(easy.getEquippedItems().size(), 4);
		assertEquals(easy.getUnequippedItems().size(), 1);
		easy.getHandCards().clear();
		easy.getEquippedItems().clear();
		easy.getUnequippedItems().clear();
		
		// Play Item Cards			
		ItemCard item0 = new ItemCard(20, "item0", 0);
		item1 = new ItemCard(21, "item1", 100);
		item2 = new ItemCard(22, "item2", 100, 2);
		easy.addCard(item0);
		easy.addCard(item2);
		easy.addCard(item1);
		AIManager.playHandCards(easy);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getCarriedItems().size(), 2);
		easy.addCard(water);
		AIManager.playHandCard(easy, water);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getCarriedItems().size(), 3);
		easy.getHandCards().clear();
		easy.getCarriedItems().clear();

		// Play Go Up A Level Cards
		GoUpLevelCard level = new GoUpLevelCard(20, "level");
		for (int playerLevel = 1; playerLevel < 9; playerLevel++) {
			easy.addCard(level);
			AIManager.playHandCard(easy, level);
			assertTrue(easy.getHandCards().isEmpty());
			assertEquals(easy.getLevel(), playerLevel + 1);
		}
		easy.addCard(level);
		AIManager.playHandCard(easy, level);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getLevel(), 9);
		easy.setHirelingCard(hireling);
		GoUpLevelCard hirelingLevel = new GoUpLevelCard(Card.GUL_KILL_THE_HIRELING, "hireling level");
		easy.addCard(hirelingLevel);
		AIManager.playHandCard(easy, hirelingLevel);
		assertEquals(easy.getHandCards().size(), 2);
		assertTrue(easy.hasHireling());
		assertEquals(easy.getLevel(), 9);
		easy.goDownLevel();
		AIManager.playHandCard(easy, hirelingLevel);
		assertEquals(easy.getHandCards().size(), 1);
		assertFalse(easy.hasHireling());
		assertEquals(easy.getLevel(), 9);
		easy.goDownLevel();
		AIManager.playHandCard(easy, hirelingLevel);
		assertEquals(easy.getHandCards().size(), 1);
		assertFalse(easy.hasHireling());
		assertEquals(easy.getLevel(), 8);
		medium.setHirelingCard(hireling);
		AIManager.playHandCard(easy, hirelingLevel);
		assertEquals(easy.getHandCards().size(), 1);
		assertFalse(easy.hasHireling());
		assertFalse(medium.hasHireling());
		assertEquals(easy.getLevel(), 9);
		easy.goDownLevels(10);
		easy.getHandCards().clear();
		
		// Play Cheat! Card
		OtherDoorCard cheat = new OtherDoorCard(Card.OD_CHEAT, "Cheat!");
		easy.addUnequippedItem(bandanna);
		easy.addUnequippedItem(boots);
		easy.addUnequippedItem(bow);
		easy.addUnequippedItem(cloak);
		easy.addUnequippedItem(farmor);
		easy.addUnequippedItem(femaleOnly);
		easy.addUnequippedItem(fthrower);
		easy.addUnequippedItem(fstaff);
		easy.addUnequippedItem(grater);
		easy.addUnequippedItem(hammer);
		easy.addUnequippedItem(helmet);
		easy.addUnequippedItem(ladder);
		easy.addUnequippedItem(maleOnly);
		easy.addUnequippedItem(noCleric);
		easy.addUnequippedItem(noThief);
		easy.addUnequippedItem(noWarrior);
		easy.addUnequippedItem(noWizard);
		easy.addUnequippedItem(sandals);
		easy.addUnequippedItem(shield);
		easy.addUnequippedItem(swiss);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 1);
		assertEquals(easy.getUnequippedItems().size(), 19);
		assertEquals(easy.getEquippedItems().get(0).getName(), shield.getName());
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 1);
		assertEquals(easy.getUnequippedItems().size(), 19);
		assertEquals(easy.getEquippedItems().get(0).getName(), shield.getName());
		easy.addRaceCard(dwarf);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 2);
		assertEquals(easy.getUnequippedItems().size(), 18);
		assertEquals(easy.getEquippedItems().get(1).getName(), swiss.getName());
		easy.setHalfBreedCard(halfbreed);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 3);
		assertEquals(easy.getUnequippedItems().size(), 17);
		assertEquals(easy.getEquippedItems().get(2).getName(), femaleOnly.getName());
		easy.getEquippedItems().remove(femaleOnly);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 3);
		assertEquals(easy.getUnequippedItems().size(), 16);
		assertEquals(easy.getEquippedItems().get(2).getName(), fstaff.getName());
		easy.getClassCards().add(wizard);
		easy.getUnequippedItems().remove(bow);
		easy.addCard(bow);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 4);
		assertEquals(easy.getUnequippedItems().size(), 15);
		assertEquals(easy.getEquippedItems().get(3).getName(), bow.getName());
		easy.getRaceCards().add(elf);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 4);
		assertEquals(easy.getUnequippedItems().size(), 15);
		assertEquals(easy.getCheatingItemCard().getName(), swiss.getName());
		easy.getEquippedItems().remove(swiss);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 3);
		assertEquals(easy.getUnequippedItems().size(), 15);
		assertEquals(easy.getCheatingItemCard().getName(), shield.getName());
		easy.getClassCards().add(warrior);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 4);
		assertEquals(easy.getUnequippedItems().size(), 14);
		assertEquals(easy.getCheatingItemCard().getName(), bandanna.getName());
		easy.getEquippedItems().remove(bandanna);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 4);
		assertEquals(easy.getUnequippedItems().size(), 13);
		assertEquals(easy.getCheatingItemCard().getName(), noWizard.getName());
		easy.getEquippedItems().remove(fstaff);
		easy.getClassCards().remove(wizard);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 4);
		assertEquals(easy.getUnequippedItems().size(), 12);
		assertEquals(easy.getCheatingItemCard().getName(), cloak.getName());
		easy.getClassCards().add(thief);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 5);
		assertEquals(easy.getUnequippedItems().size(), 11);
		assertEquals(easy.getCheatingItemCard().getName(), grater.getName());
		easy.getClassCards().add(cleric);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 6);
		assertEquals(easy.getUnequippedItems().size(), 10);
		assertEquals(easy.getCheatingItemCard().getName(), noCleric.getName());
		easy.getEquippedItems().remove(noCleric);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 6);
		assertEquals(easy.getUnequippedItems().size(), 9);
		assertEquals(easy.getCheatingItemCard().getName(), ladder.getName());
		easy.getRaceCards().add(halfling);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getEquippedItems().size(), 6);
		assertEquals(easy.getUnequippedItems().size(), 9);
		assertEquals(easy.getCheatingItemCard().getName(), ladder.getName());
		easy.getRaceCards().remove(elf);
		easy.getEquippedItems().remove(bow);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 6);
		assertEquals(easy.getUnequippedItems().size(), 8);
		assertEquals(easy.getCheatingItemCard().getName(), helmet.getName());
		easy.getEquippedItems().remove(helmet);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getEquippedItems().size(), 5);
		assertEquals(easy.getUnequippedItems().size(), 8);
		assertEquals(easy.getCheatingItemCard().getName(), helmet.getName());
		easy.getRaceCards().remove(dwarf);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 6);
		assertEquals(easy.getUnequippedItems().size(), 7);
		assertEquals(easy.getCheatingItemCard().getName(), hammer.getName());
		easy.getEquippedItems().remove(hammer);
		easy.getRaceCards().remove(dwarf);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 5);
		assertEquals(easy.getUnequippedItems().size(), 7);
		assertEquals(easy.getCheatingItemCard().getName(), shield.getName());
		easy.getEquippedItems().remove(shield);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 4);
		assertEquals(easy.getUnequippedItems().size(), 7);
		assertEquals(easy.getCheatingItemCard().getName(), noWizard.getName());
		easy.getEquippedItems().remove(noWizard);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getEquippedItems().size(), 4);
		assertEquals(easy.getUnequippedItems().size(), 6);
		assertEquals(easy.getCheatingItemCard().getName(), fthrower.getName());
		easy.getEquippedItems().remove(fthrower);
		easy.getEquippedItems().remove(ladder);
		easy.addCard(cheat);
		AIManager.playHandCard(easy, cheat);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getEquippedItems().size(), 2);
		assertEquals(easy.getUnequippedItems().size(), 6);
		assertEquals(easy.getCheatingItemCard().getName(), fthrower.getName());
		easy.getHandCards().clear();
		easy.getEquippedItems().clear();
		easy.getUnequippedItems().clear();
		easy.removeCheat();
		easy.setHalfBreedCard(null);
		easy.getRaceCards().clear();
		easy.getClassCards().clear();
				
		// Play Half-Breed and Super Munchkin
		easy.addCard(halfbreed);
		easy.addCard(munchkin);
		AIManager.playHandCards(easy);
		assertEquals(easy.getHandCards().size(), 2);
		assertFalse(easy.isHalfBreed());
		assertFalse(easy.isSuperMunchkin());
		easy.addCard(elf);
		easy.addCard(wizard);
		easy.addCard(warrior);		
		AIManager.playHandCards(easy);
		assertEquals(easy.getHandCards().size(), 0);
		assertTrue(easy.isHalfBreed());
		assertTrue(easy.isElf());
		assertTrue(easy.isSuperMunchkin());
		assertTrue(easy.isWarrior());
		assertTrue(easy.isWizard());
		easy.setHalfBreedCard(null);
		easy.setSuperMunchkinCard(null);
		easy.getRaceCards().clear();
		easy.getClassCards().clear();
		easy.addCard(elf);
		easy.addCard(dwarf);
		easy.addCard(thief);
		easy.addCard(cleric);
		easy.addCard(halfbreed);
		easy.addCard(munchkin);
		AIManager.playHandCards(easy);
		assertEquals(easy.getHandCards().size(), 0);
		assertTrue(easy.isHalfBreed());
		assertTrue(easy.isElf());
		assertTrue(easy.isDwarf());
		assertTrue(easy.isSuperMunchkin());
		assertTrue(easy.isThief());
		assertTrue(easy.isCleric());
		easy.setHalfBreedCard(null);
		easy.setSuperMunchkinCard(null);
		easy.getRaceCards().clear();
		easy.getClassCards().clear();
		
		// Play Steal Level Card
		easy.goUpLevels(6, false);
		hard.goUpLevels(2, false);
		medium.goUpLevels(1, false);
		OtherDoorCard stealLevel = new OtherDoorCard(Card.OT_STEAL_A_LEVEL, "Steal A Level");
		easy.addCard(stealLevel);
		AIManager.playHandCard(easy, stealLevel);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getLevel(), 8);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 2);
		easy.addCard(stealLevel);
		AIManager.playHandCard(easy, stealLevel);
		assertEquals(easy.getHandCards().size(), 0);
		assertEquals(easy.getLevel(), 9);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 1);
		easy.addCard(stealLevel);
		AIManager.playHandCard(easy, stealLevel);
		assertEquals(easy.getHandCards().size(), 1);
		assertEquals(easy.getLevel(), 9);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 1);
		hard.goUpLevels(7, false);
		hard.addCard(stealLevel);
		AIManager.playHandCard(hard, stealLevel);
		assertEquals(hard.getHandCards().size(), 0);
		assertEquals(easy.getLevel(), 8);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 9);
		hard.addCard(stealLevel);
		AIManager.playHandCard(hard, stealLevel);
		assertEquals(hard.getHandCards().size(), 0);
		assertEquals(easy.getLevel(), 7);
		assertEquals(medium.getLevel(), 2);
		assertEquals(hard.getLevel(), 9);
		easy.goDownLevels(10);
		medium.goDownLevels(10);
		hard.addCard(stealLevel);
		AIManager.playHandCard(hard, stealLevel);
		assertEquals(hard.getHandCards().size(), 1);
		assertEquals(easy.getLevel(), 1);
		assertEquals(medium.getLevel(), 1);
		assertEquals(hard.getLevel(), 9);
		easy.getHandCards().clear();
		hard.getHandCards().clear();
		hard.goDownLevels(10);
		
		// Play Hireling
		easy.addCard(hireling);
		AIManager.playHandCard(easy, hireling);
		assertEquals(easy.getHandCards().size(), 0);
		assertTrue(easy.hasHireling());
		easy.setHirelingCard(null);
		
		// Test Other
		easy.addCard(new OtherDoorCard(Card.OD_WANDERING_MONSTER_1, "W1"));
		easy.addCard(new OtherDoorCard(Card.OD_OUT_TO_LUNCH, "OTL"));
		easy.addCard(new OtherDoorCard(Card.OD_MATE, "Mate"));
		easy.addCard(tdemon);
		AIManager.playHandCards(easy);
		assertEquals(easy.getHandCards().size(), 4);
		easy.getHandCards().clear();
	}

	private void testEquipBest() {
		EquipmentCard helm1 = new EquipmentCard(21, "Helm1", 100, 1, EquipmentType.HEADGEAR, false, false, false);
		EquipmentCard helm2 = new EquipmentCard(22, "Helm2", 200, 2, EquipmentType.HEADGEAR, false, false, false);
		EquipmentCard armor1 = new EquipmentCard(23, "Armor1", 100, 2, EquipmentType.ARMOR, false, false, false);
		EquipmentCard armor2 = new EquipmentCard(24, "Armor2", 200, 1, EquipmentType.ARMOR, false, false, false);
		EquipmentCard shoes1 = new EquipmentCard(25, "Shoes1", 100, 1, EquipmentType.FOOTGEAR, false, false, false);
		EquipmentCard shoes2 = new EquipmentCard(26, "Shoes2", 200, 2, EquipmentType.FOOTGEAR, false, false, false);
		EquipmentCard other1 = new EquipmentCard(27, "Other1", 100, 1, EquipmentType.OTHER, false, false, false);
		EquipmentCard other2 = new EquipmentCard(28, "Other2", 200, 2, EquipmentType.OTHER, false, false, false);
		EquipmentCard other3 = new EquipmentCard(29, "Other3", 0, 0, EquipmentType.OTHER, false, false, false);
		medium.addUnequippedItem(helm1);
		medium.addUnequippedItem(helm2);
		medium.addUnequippedItem(armor1);
		medium.addUnequippedItem(armor2);
		medium.addUnequippedItem(shoes1);
		medium.addUnequippedItem(shoes2);
		medium.addUnequippedItem(other1);
		medium.addUnequippedItem(other2);
		medium.addUnequippedItem(other3);
		medium.addUnequippedItem(cloak);
		medium.addUnequippedItem(helmet);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 5);
		assertEquals(medium.getEquippedItems().size(), 6);
		assertFalse(medium.hasEquipped(helm1));
		assertTrue(medium.hasEquipped(helm2));
		assertTrue(medium.hasEquipped(armor1));
		assertFalse(medium.hasEquipped(armor2));
		assertTrue(medium.hasEquipped(shoes1) ^ medium.hasEquipped(shoes2));
		assertTrue(medium.hasEquipped(other1));
		assertTrue(medium.hasEquipped(other2));
		assertTrue(medium.hasEquipped(other3));
		assertFalse(medium.hasEquipped(cloak));
		assertFalse(medium.hasEquipped(helmet));
		medium.getUnequippedItems().addAll(medium.getEquippedItems());
		medium.getEquippedItems().clear();
		medium.equip(helm1);
		medium.equip(armor1);
		medium.equip(shoes1);
		medium.equip(other2);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 5);
		assertEquals(medium.getEquippedItems().size(), 6);
		assertFalse(medium.hasEquipped(helm1));
		assertTrue(medium.hasEquipped(helm2));
		assertTrue(medium.hasEquipped(armor1));
		assertFalse(medium.hasEquipped(armor2));
		assertTrue(medium.hasEquipped(shoes1) ^ medium.hasEquipped(shoes2));
		assertTrue(medium.hasEquipped(other1));
		assertTrue(medium.hasEquipped(other2));
		assertTrue(medium.hasEquipped(other3));
		assertFalse(medium.hasEquipped(cloak));
		assertFalse(medium.hasEquipped(helmet));
		RaceCard elf = new RaceCard(30, "Elf", Race.ELF);
		medium.addRaceCard(elf);
		ClassCard thief = new ClassCard(31, "Thief", Class.THIEF);
		medium.addClassCard(thief);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 4);
		assertEquals(medium.getEquippedItems().size(), 7);
		assertFalse(medium.hasEquipped(helm1));
		assertFalse(medium.hasEquipped(helm2));
		assertTrue(medium.hasEquipped(armor1));
		assertFalse(medium.hasEquipped(armor2));
		assertTrue(medium.hasEquipped(shoes1) ^ medium.hasEquipped(shoes2));
		assertTrue(medium.hasEquipped(other1));
		assertTrue(medium.hasEquipped(other2));
		assertTrue(medium.hasEquipped(other3));
		assertTrue(medium.hasEquipped(cloak));
		assertTrue(medium.hasEquipped(helmet));		
		medium.getEquippedItems().clear();
		medium.getUnequippedItems().clear();
		
		EquipmentCard hand1 = new EquipmentCard(32, "Hand1", 5000, 1, EquipmentType.ONE_HAND, false, false, false);
		EquipmentCard hand2 = new EquipmentCard(33, "Hand2", 300, 2, EquipmentType.ONE_HAND, false, false, false);
		EquipmentCard hand3 = new EquipmentCard(34, "Hand3", 200, 3, EquipmentType.ONE_HAND, false, false, false);
		EquipmentCard hands1 = new EquipmentCard(35, "Hands1", 300, 4, EquipmentType.TWO_HANDS, false, false, false);
		EquipmentCard hands2 = new EquipmentCard(36, "Hands2", 0, 6, EquipmentType.TWO_HANDS, false, false, false);
		medium.addUnequippedItem(hand1);
		medium.addUnequippedItem(hand2);
		medium.addUnequippedItem(hand3);
		medium.addUnequippedItem(hands1);
		medium.addUnequippedItem(hands2);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 4);
		assertEquals(medium.getEquippedItems().size(), 1);
		assertFalse(medium.hasEquipped(hand1));
		assertFalse(medium.hasEquipped(hand2));
		assertFalse(medium.hasEquipped(hand3));
		assertFalse(medium.hasEquipped(hands1));
		assertTrue(medium.hasEquipped(hands2));
		medium.setCheatCards(new OtherDoorCard(Card.OD_CHEAT, "Cheat!"), hands2);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 2);
		assertEquals(medium.getEquippedItems().size(), 3);
		assertFalse(medium.hasEquipped(hand1));
		assertTrue(medium.hasEquipped(hand2));
		assertTrue(medium.hasEquipped(hand3));
		assertFalse(medium.hasEquipped(hands1));
		assertTrue(medium.hasEquipped(hands2));
		medium.getUnequippedItems().addAll(medium.getEquippedItems());
		medium.getEquippedItems().clear();
		medium.equip(hands1);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 2);
		assertEquals(medium.getEquippedItems().size(), 3);
		assertFalse(medium.hasEquipped(hand1));
		assertTrue(medium.hasEquipped(hand2));
		assertTrue(medium.hasEquipped(hand3));
		assertFalse(medium.hasEquipped(hands1));
		medium.getEquippedItems().remove(hand3);
		assertTrue(medium.hasEquipped(hands2));
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 2);
		assertEquals(medium.getEquippedItems().size(), 2);
		assertFalse(medium.hasEquipped(hand1));
		assertFalse(medium.hasEquipped(hand2));
		assertTrue(medium.hasEquipped(hands1));
		assertTrue(medium.hasEquipped(hands2));
		medium.addUnequippedItem(hand3);
		medium.getUnequippedItems().remove(hand2);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 1);
		assertEquals(medium.getEquippedItems().size(), 3);
		assertTrue(medium.hasEquipped(hand1));
		assertTrue(medium.hasEquipped(hand3));
		assertFalse(medium.hasEquipped(hands1));
		assertTrue(medium.hasEquipped(hands2));
		medium.addUnequippedItem(fstaff);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 2);
		assertEquals(medium.getEquippedItems().size(), 3);
		assertTrue(medium.hasEquipped(hand1));
		assertTrue(medium.hasEquipped(hand3));
		assertFalse(medium.hasEquipped(hands1));
		assertTrue(medium.hasEquipped(hands2));
		assertFalse(medium.hasEquipped(fstaff));
		ClassCard wizard = new ClassCard(37, "Wizard", Class.WIZARD);
		medium.setSuperMunchkinCard(new OtherDoorCard(Card.OD_SUPER_MUNCHKIN_1, "Super Munchkin"));
		medium.addClassCard(wizard);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 2);
		assertEquals(medium.getEquippedItems().size(), 3);
		assertFalse(medium.hasEquipped(hand1));
		assertTrue(medium.hasEquipped(hand3));
		assertFalse(medium.hasEquipped(hands1));
		assertTrue(medium.hasEquipped(hands2));
		assertTrue(medium.hasEquipped(fstaff));
		medium.removeCheat();
		medium.getEquippedItems().clear();
		medium.getUnequippedItems().clear();
		
		medium.addUnequippedItem(helm1);
		medium.addUnequippedItem(powerHat);
		medium.getClassCards().remove(wizard);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 1);
		assertEquals(medium.getEquippedItems().size(), 1);
		assertTrue(medium.hasEquipped(helm1));
		assertFalse(medium.hasEquipped(powerHat));
		medium.getClassCards().add(wizard);
		AIManager.equipBest(medium);
		assertEquals(medium.getUnequippedItems().size(), 1);
		assertEquals(medium.getEquippedItems().size(), 1);
		assertFalse(medium.hasEquipped(helm1));
		assertTrue(medium.hasEquipped(powerHat));
		medium.getEquippedItems().clear();
		medium.getUnequippedItems().clear();
		
		medium.addUnequippedItem(swiss);
		medium.setHalfBreedCard(new OtherDoorCard(Card.OD_HALF_BREED_1, "Half-Breed"));
		AIManager.equipBest(medium);
		assertTrue(medium.isElf());
		assertEquals(medium.getUnequippedItems().size(), 0);
		assertEquals(medium.getEquippedItems().size(), 1);
		assertTrue(medium.hasEquipped(swiss));
		medium.setHalfBreedCard(null);
		AIManager.equipBest(medium);
		assertFalse(medium.isElf());
		assertEquals(medium.getUnequippedItems().size(), 0);
		assertEquals(medium.getEquippedItems().size(), 1);
		assertTrue(medium.hasEquipped(swiss));
		medium.addRaceCard(elf);
		medium.addUnequippedItem(helmet);
		AIManager.equipBest(medium);
		assertTrue(medium.isElf());
		assertEquals(medium.getUnequippedItems().size(), 1);
		assertEquals(medium.getEquippedItems().size(), 1);
		assertFalse(medium.hasEquipped(swiss));
		assertTrue(medium.hasEquipped(helmet));
		medium.getEquippedItems().remove(helmet);
		medium.addUnequippedItem(hand2);
		medium.addUnequippedItem(hand3);
		AIManager.equipBest(medium);
		assertTrue(medium.isElf());
		assertEquals(medium.getUnequippedItems().size(), 1);
		assertEquals(medium.getEquippedItems().size(), 2);
		assertFalse(medium.hasEquipped(swiss));
		assertTrue(medium.hasEquipped(hand2));
		assertTrue(medium.hasEquipped(hand3));
		medium.getEquippedItems().remove(hand3);
		medium.addUnequippedItem(hands2);
		AIManager.equipBest(medium);
		assertTrue(medium.isElf());
		assertEquals(medium.getUnequippedItems().size(), 2);
		assertEquals(medium.getEquippedItems().size(), 1);
		assertFalse(medium.hasEquipped(swiss));
		assertFalse(medium.hasEquipped(hand2));
		assertTrue(medium.hasEquipped(hands2));
		medium.addUnequippedItem(bandanna);
		AIManager.equipBest(medium);
		assertFalse(medium.isElf());
		assertEquals(medium.getUnequippedItems().size(), 2);
		assertEquals(medium.getEquippedItems().size(), 2);
		assertFalse(medium.hasEquipped(swiss));
		assertFalse(medium.hasEquipped(hand2));
		assertTrue(medium.hasEquipped(hands2));
		assertTrue(medium.hasEquipped(bandanna));
		medium.getEquippedItems().clear();
		medium.getUnequippedItems().clear();
		
		ClassCard warrior = new ClassCard(38, "Warrior", Class.WARRIOR);
		ClassCard cleric = new ClassCard(39, "Cleric", Class.CLERIC);
		medium.addUnequippedItem(noThief);
		medium.addUnequippedItem(noWizard);
		medium.addUnequippedItem(noWarrior);
		medium.addUnequippedItem(noCleric);
		AIManager.equipBest(medium);
		assertFalse(medium.isWarrior());
		assertTrue(medium.isWizard());
		assertFalse(medium.isCleric());
		assertTrue(medium.isThief());
		assertTrue(medium.isSuperMunchkin());
		assertEquals(medium.getUnequippedItems().size(), 2);
		assertEquals(medium.getEquippedItems().size(), 2);
		assertFalse(medium.hasEquipped(noThief));
		assertFalse(medium.hasEquipped(noWizard));
		assertTrue(medium.hasEquipped(noWarrior));
		assertTrue(medium.hasEquipped(noCleric));
		medium.getClassCards().remove(thief);
		medium.getClassCards().add(cleric);
		AIManager.equipBest(medium);
		assertFalse(medium.isWarrior());
		assertTrue(medium.isWizard());
		assertTrue(medium.isCleric());
		assertFalse(medium.isThief());
		assertTrue(medium.isSuperMunchkin());
		assertEquals(medium.getUnequippedItems().size(), 2);
		assertEquals(medium.getEquippedItems().size(), 2);
		assertTrue(medium.hasEquipped(noThief));
		assertFalse(medium.hasEquipped(noWizard));
		assertTrue(medium.hasEquipped(noWarrior));
		assertFalse(medium.hasEquipped(noCleric));
		easy.goUpLevels(8, false);
		AIManager.equipBest(medium);
		assertFalse(medium.isWarrior());
		assertTrue(medium.isWizard());
		assertFalse(medium.isCleric());
		assertFalse(medium.isThief());
		assertFalse(medium.isSuperMunchkin());
		assertEquals(medium.getUnequippedItems().size(), 1);
		assertEquals(medium.getEquippedItems().size(), 3);
		assertTrue(medium.hasEquipped(noThief));
		assertFalse(medium.hasEquipped(noWizard));
		assertTrue(medium.hasEquipped(noWarrior));
		assertTrue(medium.hasEquipped(noCleric));
		AIManager.equipBest(medium);
		assertFalse(medium.isWarrior());
		assertFalse(medium.isWizard());
		assertFalse(medium.isCleric());
		assertFalse(medium.isThief());
		assertFalse(medium.isSuperMunchkin());
		assertEquals(medium.getUnequippedItems().size(), 0);
		assertEquals(medium.getEquippedItems().size(), 4);
		assertTrue(medium.hasEquipped(noThief));
		assertTrue(medium.hasEquipped(noWizard));
		assertTrue(medium.hasEquipped(noWarrior));
		assertTrue(medium.hasEquipped(noCleric));
		medium.getClassCards().add(wizard);
		medium.addUnequippedItem(armor2);
		AIManager.equipBest(medium);
		assertFalse(medium.isWarrior());
		assertTrue(medium.isWizard());
		assertFalse(medium.isCleric());
		assertFalse(medium.isThief());
		assertFalse(medium.isSuperMunchkin());
		assertEquals(medium.getUnequippedItems().size(), 1);
		assertEquals(medium.getEquippedItems().size(), 4);
		assertTrue(medium.hasEquipped(noThief));
		assertFalse(medium.hasEquipped(noWizard));
		assertTrue(medium.hasEquipped(noWarrior));
		assertTrue(medium.hasEquipped(noCleric));
		medium.getEquippedItems().remove(armor2);
		medium.getClassCards().set(0, warrior);
		medium.setHirelingCard(hireling);
		medium.addUnequippedItem(shield);
		AIManager.equipBest(medium);
		assertTrue(medium.isWarrior());
		assertFalse(medium.isWizard());
		assertFalse(medium.isCleric());
		assertFalse(medium.isThief());
		assertFalse(medium.isSuperMunchkin());
		assertEquals(medium.getUnequippedItems().size(), 1);
		assertEquals(medium.getEquippedItems().size(), 4);
		assertTrue(medium.hasEquipped(noThief));
		assertTrue(medium.hasEquipped(noWizard));
		assertFalse(medium.hasEquipped(noWarrior));
		assertTrue(medium.hasEquipped(noCleric));
		medium.getEquippedItems().remove(shield);
		AIManager.equipBest(medium);
		assertFalse(medium.isWarrior());
		assertFalse(medium.isWizard());
		assertFalse(medium.isCleric());
		assertFalse(medium.isThief());
		assertFalse(medium.isSuperMunchkin());
		assertEquals(medium.getUnequippedItems().size(), 0);
		assertEquals(medium.getEquippedItems().size(), 4);
		assertTrue(medium.hasEquipped(noThief));
		assertTrue(medium.hasEquipped(noWizard));
		assertTrue(medium.hasEquipped(noWarrior));
		assertTrue(medium.hasEquipped(noCleric));		
		easy.goDownLevels(10);
		medium.setHirelingCard(null);
		medium.getEquippedItems().clear();
		medium.getUnequippedItems().clear();
		
		Player activePlayer = GM.getActivePlayer();
		GM.setActivePlayer(medium);
		medium.addCard(bow);
		medium.addCard(backsword);
		AIManager.playHandCards(medium);
		assertTrue(medium.getUnequippedItems().contains(bow));
		assertTrue(medium.getEquippedItems().contains(backsword));
		AIManager.equipBest(medium);
		assertTrue(medium.getUnequippedItems().contains(bow));
		assertTrue(medium.getEquippedItems().contains(backsword));
		medium.getUnequippedItems().clear();
		medium.getEquippedItems().clear();
		GM.setActivePlayer(activePlayer);
	}
	
	private void testGetDeathCost() {
		int gain = 4 * AIManager.UNKNOWN_CARD_VALUE;
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), - gain);
		ItemCard item0 = new ItemCard(20, "Item0", 0, 0);
		ItemCard item1 = new ItemCard(21, "Item1", 300, 2);
		ItemCard item2 = new ItemCard(22, "Item2", 100, 5);
		EquipmentCard equip1 = new EquipmentCard(23, "Equip1", 300, 2, EquipmentType.OTHER, false, false, false);
		EquipmentCard equip2 = new EquipmentCard(24, "Equip2", 500, 1, EquipmentType.FOOTGEAR, false, false, false);
		hard.addItem(item0);
		hard.addItem(item1);
		hard.addItem(item2);
		hard.addUnequippedItem(equip1);
		hard.getEquippedItems().add(equip2);
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), 0 + 302 + 501 + 800 + 500 - gain);
		hard.setHirelingCard(hireling);
		int hirelingValue = AICardEvaluator.getCardValueToPlayer(hireling, hard, hard.getHandCards());
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), 0 + 302 + 501 + 800 + 500 + hirelingValue - gain);
		hard.addCard(new GoUpLevelCard(25, "Level"));
		hard.addCard(item1);
		hard.addCard(equip2);
		assertEquals(AIManager.getDeathCost(hard, null), 0 + 302 + 501 + 800 + 500 + hirelingValue + 800 * 3 - gain);
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), 0 + 302 + 501 + 800 + 500 + hirelingValue + 1000 + 302 + 500 - gain);
		hard.addLastingCurse(headChicken);
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), 0 + 302 + 501 + 800 + 500 + hirelingValue + 1000 + 302 + 500 - gain - 300);
		hard.getClassCards().add(new ClassCard(26, "Thief", Class.THIEF));
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), 0 + 302 + 501 + 800 + 500 + hirelingValue + 1000 + 302 + 500 - gain - 500);
		hard.getHandCards().clear();
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), 0 + 302 + 501 + 800 + 500 + hirelingValue - gain - 500);
		hard.getUnequippedItems().clear();
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), 0 + 302 + 501 + 500 + hirelingValue - gain - 500);
		hard.getCarriedItems().clear();
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), 500 + hirelingValue - gain - 500);
		hard.setHirelingCard(null);
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), 500 - gain - 500);
		hard.removeChickenOnHeadCurse();
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), 500 - gain);
		hard.getEquippedItems().clear();
		assertEquals(AIManager.getDeathCost(hard, hard.getHandCards()), - gain);
		hard.getClassCards().clear();
		assertEquals(AIManager.getDeathCost(hard, null), - gain);
	}
	
	private void testGetRankedPlayers() {
		LinkedList<Player> rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.size(), 4);
		assertEquals(rankedPlayers.get(3).toString(), easy.toString());
		assertEquals(rankedPlayers.get(2).toString(), medium.toString());
		assertEquals(rankedPlayers.get(1).toString(), human.toString());
		assertEquals(rankedPlayers.get(0).toString(), hard.toString());
		easy.goUpLevel(false);
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.size(), 4);
		assertEquals(rankedPlayers.get(0).toString(), easy.toString());
		assertEquals(rankedPlayers.get(3).toString(), medium.toString());
		assertEquals(rankedPlayers.get(2).toString(), human.toString());
		assertEquals(rankedPlayers.get(1).toString(), hard.toString());
		medium.addCard(new GoUpLevelCard(20, "Level"));
		medium.addItem(new ItemCard(21, "Item1", 200));
		human.addItem(new ItemCard(22, "Item2", 6, 0));
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.get(1).toString(), easy.toString());
		assertEquals(rankedPlayers.get(0).toString(), medium.toString());
		assertEquals(rankedPlayers.get(2).toString(), human.toString());
		assertEquals(rankedPlayers.get(3).toString(), hard.toString());
		hard.addItem(new ItemCard(23, "Item3", 2, 0));
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.get(1).toString(), easy.toString());
		assertEquals(rankedPlayers.get(0).toString(), medium.toString());
		assertEquals(rankedPlayers.get(3).toString(), human.toString());
		assertEquals(rankedPlayers.get(2).toString(), hard.toString());
		human.addUnequippedItem(femaleOnly);
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.get(2).toString(), easy.toString());
		assertEquals(rankedPlayers.get(1).toString(), medium.toString());
		assertEquals(rankedPlayers.get(0).toString(), human.toString());
		assertEquals(rankedPlayers.get(3).toString(), hard.toString());
		assertTrue(hard.isMale());
		hard.addUnequippedItem(maleOnly);
		assertEquals(hard.equip(maleOnly), "");
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.get(3).toString(), easy.toString());
		assertEquals(rankedPlayers.get(2).toString(), medium.toString());
		assertEquals(rankedPlayers.get(1).toString(), human.toString());
		assertEquals(rankedPlayers.get(0).toString(), hard.toString());
		easy.addRaceCard(new RaceCard(24, "Elf", Race.ELF));
		human.addClassCard(new ClassCard(25, "Warrior", Class.WARRIOR));
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.get(1).toString(), easy.toString());
		assertEquals(rankedPlayers.get(3).toString(), medium.toString());
		assertEquals(rankedPlayers.get(0).toString(), human.toString());
		assertEquals(rankedPlayers.get(2).toString(), hard.toString());
		medium.addRaceCard(new RaceCard(26, "Dwarf", Race.DWARF));
		hard.addClassCard(new ClassCard(25, "Cleric", Class.CLERIC));
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.get(3).toString(), easy.toString());
		assertEquals(rankedPlayers.get(2).toString(), medium.toString());
		assertEquals(rankedPlayers.get(1).toString(), human.toString());
		assertEquals(rankedPlayers.get(0).toString(), hard.toString());
		easy.setHalfBreedCard(new OtherDoorCard(Card.OD_HALF_BREED_1, "Half-Breed"));
		human.setSuperMunchkinCard(new OtherDoorCard(Card.OD_SUPER_MUNCHKIN_1, "Super Munchkin"));
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.get(2).toString(), easy.toString());
		assertEquals(rankedPlayers.get(3).toString(), medium.toString());
		assertEquals(rankedPlayers.get(0).toString(), human.toString());
		assertEquals(rankedPlayers.get(1).toString(), hard.toString());
		hard.setHirelingCard(hireling);
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.get(2).toString(), easy.toString());
		assertEquals(rankedPlayers.get(3).toString(), medium.toString());
		assertEquals(rankedPlayers.get(1).toString(), human.toString());
		assertEquals(rankedPlayers.get(0).toString(), hard.toString());
		easy.addLastingCurse(changeSex);
		hard.addLastingCurse(headChicken);
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.get(3).toString(), easy.toString());
		assertEquals(rankedPlayers.get(2).toString(), medium.toString());
		assertEquals(rankedPlayers.get(0).toString(), human.toString());
		assertEquals(rankedPlayers.get(1).toString(), hard.toString());
		human.addLastingCurse(mirror);
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.get(3).toString(), easy.toString());
		assertEquals(rankedPlayers.get(2).toString(), medium.toString());
		assertEquals(rankedPlayers.get(0).toString(), human.toString());
		assertEquals(rankedPlayers.get(1).toString(), hard.toString());
		human.equip(femaleOnly);
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.size(), 4);
		assertEquals(rankedPlayers.get(3).toString(), easy.toString());
		assertEquals(rankedPlayers.get(2).toString(), medium.toString());
		assertEquals(rankedPlayers.get(1).toString(), human.toString());
		assertEquals(rankedPlayers.get(0).toString(), hard.toString());
		easy.goDownLevel();
		easy.getRaceCards().clear();
		easy.setHalfBreedCard(null);
		easy.removeLastingCurses();
		assertTrue(easy.isMale());
		medium.getHandCards().clear();
		medium.getCarriedItems().clear();
		medium.getRaceCards().clear();
		human.getCarriedItems().clear();
		human.getEquippedItems().clear();
		human.getClassCards().clear();
		human.setSuperMunchkinCard(null);
		human.removeLastingCurses();
		hard.getCarriedItems().clear();
		hard.getEquippedItems().clear();
		hard.getClassCards().clear();
		hard.setHirelingCard(null);
		hard.removeChickenOnHeadCurse();
		rankedPlayers = AIManager.getRankedPlayers();
		assertEquals(rankedPlayers.size(), 4);
		assertEquals(rankedPlayers.get(3).toString(), easy.toString());
		assertEquals(rankedPlayers.get(2).toString(), medium.toString());
		assertEquals(rankedPlayers.get(1).toString(), human.toString());
		assertEquals(rankedPlayers.get(0).toString(), hard.toString());
	}
	
	private void testGetCurseCost() {
		GM.getDoorDeck().getDiscardPile().clear();
		
		Stack<Card> doorDeck = DoorDeckFactory.buildDeck();
		for (Card card : doorDeck) {
			if (card instanceof CurseCard) {
				CurseCard curse = (CurseCard)card;
				
				if (card.getID() == Card.CU_CHANGE_CLASS) {
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					ClassCard warrior = new ClassCard(20, "Warrior", Class.WARRIOR);
					ClassCard wizard = new ClassCard(21, "Wizard", Class.WIZARD);
					easy.addClassCard(warrior);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500);
					easy.discard(warrior);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					easy.addClassCard(wizard);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					easy.addUnequippedItem(fstaff);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 1200);
					easy.addUnequippedItem(shield);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 1200 - 1000);
					easy.getUnequippedItems().remove(fstaff);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), -1000);
					easy.setSuperMunchkinCard(new OtherDoorCard(Card.OD_SUPER_MUNCHKIN_2, "Super Munchkin"));
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), -1000 + 100);
					easy.addClassCard(warrior);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500 + 100);
					GM.getDoorDeck().getDiscardPile().clear();
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500 + 100 + 500 + 1000);
					easy.getUnequippedItems().clear();
					easy.getClassCards().clear();
					easy.setSuperMunchkinCard(null);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_CHANGE_RACE) {
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					RaceCard elf = new RaceCard(20, "Elf", Race.ELF);
					RaceCard halfling = new RaceCard(21, "Halfling", Race.HALFLING);
					easy.addRaceCard(elf);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 450);
					easy.discard(elf);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					easy.addRaceCard(halfling);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 - 450);
					easy.addUnequippedItem(ladder);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 - 450 + 800);
					easy.addUnequippedItem(bow);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 - 450 + 800 - 800);
					easy.getUnequippedItems().remove(ladder);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 - 450 - 800);
					easy.setHalfBreedCard(new OtherDoorCard(Card.OD_HALF_BREED_2, "Half-Breed"));
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 - 450 - 800 + 300);
					easy.addRaceCard(elf);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 + 300);
					GM.getDoorDeck().getDiscardPile().clear();
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 + 450 + 800 + 300);
					easy.getUnequippedItems().clear();
					easy.getRaceCards().clear();
					easy.setHalfBreedCard(null);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_CHANGE_SEX) {
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 500);
					medium.getEquippedItems().add(maleOnly);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 500 - 800);
					medium.addUnequippedItem(femaleOnly);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 500);
					medium.getEquippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 500 + 800);
					medium.getUnequippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 500);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 500);
					hard.getEquippedItems().add(maleOnly);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 500 + 800);
					hard.addUnequippedItem(femaleOnly);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 500);
					hard.getEquippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 500 - 800);
					hard.getUnequippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 500);
				}
				else if (card.getID() == Card.CU_CHICKEN_ON_YOUR_HEAD) {
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 300);
					hard.addClassCard(new ClassCard(20, "Thief", Class.THIEF));
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 500);
					hard.getClassCards().clear();
				}
				else if (card.getID() == Card.CU_DUCK_OF_DOOM) {
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.goUpLevel(false);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 1000);
					medium.goUpLevel(false);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 2000);
					medium.goUpLevel(false);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 2000);
					medium.goDownLevels(10);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_INCOME_TAX) {
					ItemCard item0 = new ItemCard(20, "Item0", 0);
					ItemCard item1 = new ItemCard(21, "Item1", 100);
					ItemCard item2 = new ItemCard(22, "Item2", 0, 2);
					ItemCard item3 = new ItemCard(23, "Item3", 200, 4);
					ItemCard item4 = new ItemCard(24, "Item4", 400, 3);
					EquipmentCard equip1 = new EquipmentCard(25, "Equip1", 200, 1, EquipmentType.OTHER, true, false, false);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.addCard(item4);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.addUnequippedItem(equip1);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 400);
					hard.addItem(item3);
					hard.equip(equip1);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 400);
					hard.addItem(item4);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 400);
					hard.addItem(item1);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 100);
					hard.addItem(item2);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 100);
					hard.addItem(item0);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.getCarriedItems().remove(item0);
					hard.getCarriedItems().remove(item1);
					hard.getEquippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 200);
					hard.getCarriedItems().remove(item2);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 402);
					hard.getCarriedItems().remove(item3);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 403);
					hard.getCarriedItems().clear();
					hard.getHandCards().clear();
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_LOSE_1_BIG_ITEM) {
					EquipmentCard big0 = new EquipmentCard(20, "Big0", 1, 0, EquipmentType.OTHER, true, false, false);
					EquipmentCard big1 = new EquipmentCard(21, "Big1", 600, 1, EquipmentType.OTHER, true, false, false);
					EquipmentCard big2 = new EquipmentCard(22, "Big2", 800, 4, EquipmentType.OTHER, true, false, false);
					EquipmentCard big3 = new EquipmentCard(23, "Big3", 100, 5, EquipmentType.OTHER, true, false, false);
					EquipmentCard small = new EquipmentCard(25, "small", 0, 0, EquipmentType.OTHER, false, false, false);
					hard.addRaceCard(new RaceCard(26, "Dwarf", Race.DWARF));
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.addUnequippedItem(small);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.getEquippedItems().add(big3);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 2000);
					hard.addUnequippedItem(big1);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 600);
					hard.addUnequippedItem(big2);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 600);
					hard.getEquippedItems().add(big0);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 1);
					hard.discard(big1);
					hard.discard(big0);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 1600);
					hard.discard(big2);
					hard.discard(big3);
					hard.discard(small);
					hard.getRaceCards().clear();
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_LOSE_1_LEVEL_1) {
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.goUpLevel(false);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 1000);
					medium.goUpLevel(false);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 1000);
					medium.goUpLevel(false);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 1000);
					medium.goDownLevels(10);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_LOSE_1_SMALL_ITEM_2) {
					ItemCard item0 = new ItemCard(20, "Item0", 0);
					ItemCard item1 = new ItemCard(21, "Item1", 100);
					ItemCard item2 = new ItemCard(22, "Item2", 0, 2);
					ItemCard item3 = new ItemCard(23, "Item3", 200, 4);
					ItemCard item4 = new ItemCard(24, "Item4", 400, 3);
					EquipmentCard small = new EquipmentCard(25, "small", 200, 1, EquipmentType.OTHER, false, false, false);
					EquipmentCard big = new EquipmentCard(26, "big", 200, 1, EquipmentType.OTHER, true, false, false);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.addCard(item4);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.addUnequippedItem(big);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.addUnequippedItem(small);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 400);
					hard.addItem(item3);
					hard.equip(small);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 400);
					hard.addItem(item4);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 400);
					hard.addItem(item1);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 100);
					hard.addItem(item2);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 100);
					hard.addItem(item0);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.getCarriedItems().remove(item0);
					hard.getCarriedItems().remove(item1);
					hard.getEquippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 200);
					hard.getCarriedItems().remove(item2);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 402);
					hard.getCarriedItems().remove(item3);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 403);
					hard.getUnequippedItems().clear();
					hard.getEquippedItems().clear();
					hard.getCarriedItems().clear();
					hard.getHandCards().clear();
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_LOSE_THE_ARMOR_YOU_ARE_WEARING) {
					EquipmentCard armor1 = new EquipmentCard(20, "armor1", 300, 0, EquipmentType.ARMOR, false, false, false);
					EquipmentCard armor2 = new EquipmentCard(21, "armor2", 200, 1, EquipmentType.ARMOR, true, false, false);
					EquipmentCard hat = new EquipmentCard(22, "hat", 600, 2, EquipmentType.HEADGEAR, false, false, false);
					EquipmentCard shoes = new EquipmentCard(23, "shoes", 700, 2, EquipmentType.FOOTGEAR, false, false, false);
					EquipmentCard hand = new EquipmentCard(24, "hand", 900, 2, EquipmentType.ONE_HAND, false, false, false);
					EquipmentCard hands = new EquipmentCard(25, "hands", 900, 3, EquipmentType.TWO_HANDS, false, false, false);
					EquipmentCard other = new EquipmentCard(26, "other", 800, 2, EquipmentType.OTHER, false, false, false);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.getEquippedItems().add(hat);
					medium.getEquippedItems().add(shoes);
					medium.getEquippedItems().add(hand);
					medium.getEquippedItems().add(hands);
					medium.getEquippedItems().add(other);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.addUnequippedItem(armor1);
					medium.addUnequippedItem(armor2);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.equip(armor1);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 300);
					medium.setCheatCards(new OtherDoorCard(Card.OD_CHEAT, "Cheat!"), armor2);
					medium.equip(armor2);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 300 + 400);
					medium.unequip(armor1);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 400);
					medium.removeCheat();
					medium.getEquippedItems().clear();
					medium.getUnequippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_LOSE_THE_FOOTGEAR_YOU_ARE_WEARING) {
					EquipmentCard shoes1 = new EquipmentCard(20, "shoes1", 200, 0, EquipmentType.FOOTGEAR, false, false, false);
					EquipmentCard shoes2 = new EquipmentCard(21, "shoes2", 500, 1, EquipmentType.FOOTGEAR, true, false, false);
					EquipmentCard hat = new EquipmentCard(22, "hat", 600, 2, EquipmentType.HEADGEAR, false, false, false);
					EquipmentCard armor = new EquipmentCard(23, "armor", 700, 2, EquipmentType.ARMOR, false, false, false);
					EquipmentCard hand = new EquipmentCard(24, "hand", 900, 2, EquipmentType.ONE_HAND, false, false, false);
					EquipmentCard hands = new EquipmentCard(25, "hands", 900, 3, EquipmentType.TWO_HANDS, false, false, false);
					EquipmentCard other = new EquipmentCard(26, "other", 800, 2, EquipmentType.OTHER, false, false, false);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.getEquippedItems().add(hat);
					medium.getEquippedItems().add(armor);
					medium.getEquippedItems().add(hand);
					medium.getEquippedItems().add(hands);
					medium.getEquippedItems().add(other);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.addUnequippedItem(shoes1);
					medium.addUnequippedItem(shoes2);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.equip(shoes2);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 500);
					medium.setCheatCards(new OtherDoorCard(Card.OD_CHEAT, "Cheat!"), shoes1);
					assertEquals(medium.equip(shoes1), "");
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 500 + 200);
					medium.unequip(shoes2);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 200);
					medium.removeCheat();
					medium.getEquippedItems().clear();
					medium.getUnequippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_LOSE_THE_HEADGEAR_YOU_ARE_WEARING) {
					EquipmentCard hat1 = new EquipmentCard(20, "hat1", 100, 1, EquipmentType.HEADGEAR, false, false, false);
					EquipmentCard hat2 = new EquipmentCard(21, "hat2", 150, 0, EquipmentType.HEADGEAR, true, false, false);
					EquipmentCard armor = new EquipmentCard(22, "armor", 600, 2, EquipmentType.ARMOR, false, false, false);
					EquipmentCard shoes = new EquipmentCard(23, "shoes", 700, 2, EquipmentType.FOOTGEAR, false, false, false);
					EquipmentCard hand = new EquipmentCard(24, "hand", 900, 2, EquipmentType.ONE_HAND, false, false, false);
					EquipmentCard hands = new EquipmentCard(25, "hands", 900, 3, EquipmentType.TWO_HANDS, false, false, false);
					EquipmentCard other = new EquipmentCard(26, "other", 800, 2, EquipmentType.OTHER, false, false, false);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.getEquippedItems().add(armor);
					medium.getEquippedItems().add(shoes);
					medium.getEquippedItems().add(hand);
					medium.getEquippedItems().add(hands);
					medium.getEquippedItems().add(other);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.addUnequippedItem(hat1);
					medium.addUnequippedItem(hat2);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
					medium.equip(hat1);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 400);
					medium.setCheatCards(new OtherDoorCard(Card.OD_CHEAT, "Cheat!"), hat2);
					medium.equip(hat2);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 400 + 150);
					medium.addLastingCurse(headChicken);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 400 + 150 - 300);
					medium.addClassCard(new ClassCard(27, "Thief", Class.THIEF));
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 400 + 150 - 500);
					medium.unequip(hat1);
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 150 - 500);
					medium.removeCheat();
					medium.getEquippedItems().clear();
					medium.getUnequippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0 - 500);
					medium.getClassCards().clear();
					medium.removeChickenOnHeadCurse();
					assertEquals(AIManager.getCurseCost(curse, medium, medium.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_LOSE_TWO_CARDS) {
					ItemCard item0 = new ItemCard(20, "item0", 1);
					ItemCard item1 = new ItemCard(21, "item1", 100, 3);
					ItemCard item2 = new ItemCard(22, "item2", 300, 2);
					ItemCard item3 = new ItemCard(23, "item3", 300, 3);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					easy.addItem(item3);
					assertEquals(AIManager.getCurseCost(curse, easy, null), 0);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					easy.addCard(item2);
					assertEquals(AIManager.getCurseCost(curse, easy, null), 800);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 302);
					easy.addCard(new GoUpLevelCard(24, "Level"));
					assertEquals(AIManager.getCurseCost(curse, easy, null), 700 + 800);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 302 + 1000);
					easy.addCard(item1);
					assertEquals(AIManager.getCurseCost(curse, easy, null), 700 + 800);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 301 + 302);
					easy.addCard(item0);
					assertEquals(AIManager.getCurseCost(curse, easy, null), 600 + 700);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 1 + 301);
					easy.addCard(item3);
					assertEquals(AIManager.getCurseCost(curse, easy, null), 600 + 700);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 1 + 301);
					easy.discard(item0);
					assertEquals(AIManager.getCurseCost(curse, easy, null), 600 + 700);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 301 + 302);
					easy.discard(item1);
					assertEquals(AIManager.getCurseCost(curse, easy, null), 700 + 800);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 302 + 303);
					easy.discard(item2);
					assertEquals(AIManager.getCurseCost(curse, easy, null), 700 + 800);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 303 + 1000);
					easy.discard(item3);
					assertEquals(AIManager.getCurseCost(curse, easy, null), 800);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 1000);
					easy.getHandCards().clear();
					easy.getCarriedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, easy, null), 0);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_LOSE_YOUR_CLASS) {
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					easy.goUpLevel(false);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 1000);
					ClassCard warrior = new ClassCard(20, "Warrior", Class.WARRIOR);
					ClassCard wizard = new ClassCard(21, "Wizard", Class.WIZARD);
					easy.addClassCard(warrior);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500);
					easy.discard(warrior);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 1000);
					easy.addClassCard(wizard);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500);
					easy.addUnequippedItem(fstaff);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500 + 1200);
					easy.addUnequippedItem(shield);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500 + 1200);
					easy.getUnequippedItems().remove(fstaff);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500);
					easy.setSuperMunchkinCard(new OtherDoorCard(Card.OD_SUPER_MUNCHKIN_2, "Super Munchkin"));
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500 + 100);
					easy.addClassCard(warrior);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500 + 100);
					GM.getDoorDeck().getDiscardPile().clear();
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500 + 100);
					easy.addUnequippedItem(fstaff);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 500 + 100 + 1000);
					easy.getClassCards().clear();
					easy.setSuperMunchkinCard(null);
					easy.getUnequippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 1000);
					easy.goDownLevel();
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_LOSE_YOUR_RACE) {
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					easy.goUpLevel(false);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					RaceCard elf = new RaceCard(20, "Elf", Race.ELF);
					RaceCard halfling = new RaceCard(21, "Halfling", Race.HALFLING);
					easy.addRaceCard(elf);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 450);
					easy.discard(elf);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					easy.addRaceCard(halfling);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50);
					easy.addUnequippedItem(ladder);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 + 800);
					easy.addUnequippedItem(bow);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 + 800);
					easy.getUnequippedItems().remove(ladder);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50);
					easy.setHalfBreedCard(new OtherDoorCard(Card.OD_HALF_BREED_2, "Half-Breed"));
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 + 300);
					easy.addRaceCard(elf);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 + 450 + 800 + 300);
					GM.getDoorDeck().getDiscardPile().clear();
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 + 450 + 800 + 300);
					easy.addUnequippedItem(ladder);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 50 + 800 + 450 + 800 + 300);
					easy.discard(halfling);
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 450 + 800 + 100);
					easy.getRaceCards().clear();
					easy.setHalfBreedCard(null);
					easy.getUnequippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
					easy.goDownLevel();
					assertEquals(AIManager.getCurseCost(curse, easy, easy.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_MALIGN_MIRROR) {
					EquipmentCard hat = new EquipmentCard(20, "hat", 100, 1, EquipmentType.HEADGEAR, false, false, false);
					EquipmentCard armor = new EquipmentCard(22, "armor", 600, 1, EquipmentType.ARMOR, false, true, false);
					EquipmentCard shoes = new EquipmentCard(23, "shoes", 700, 2, EquipmentType.FOOTGEAR, false, true, true);
					EquipmentCard hand = new EquipmentCard(24, "hand", 900, 2, EquipmentType.ONE_HAND, true, false, true);
					EquipmentCard hands = new EquipmentCard(25, "hands", 900, 3, EquipmentType.TWO_HANDS, false, true, true);
					EquipmentCard other = new EquipmentCard(26, "other", 800, 4, EquipmentType.OTHER, false, false, true);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.addUnequippedItem(hat);
					hard.addUnequippedItem(armor);
					hard.addUnequippedItem(shoes);
					hard.addUnequippedItem(hand);
					hard.addUnequippedItem(hands);
					hard.addUnequippedItem(other);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.equip(hat);
					hard.equip(armor);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.equip(shoes);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 200);
					hard.equip(hands);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 200 + 300);
					hard.equip(other);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 200 + 300 + 400);
					hard.getUnequippedItems().remove(hand);
					hard.getEquippedItems().add(hand);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 200 + 300 + 400 + 200);
					hard.unequip(hands);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 200 + 400 + 200);
					hard.unequip(shoes);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 400 + 200);
					hard.getEquippedItems().clear();
					hard.getUnequippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
				}
				else if (card.getID() == Card.CU_TRULY_OBNOXIOUS_CURSE) {
					EquipmentCard hat = new EquipmentCard(20, "hat", 100, 1, EquipmentType.HEADGEAR, false, false, false);
					EquipmentCard armor = new EquipmentCard(22, "armor", 600, 2, EquipmentType.ARMOR, false, true, false);
					EquipmentCard shoes = new EquipmentCard(23, "shoes", 700, 2, EquipmentType.FOOTGEAR, false, true, true);
					EquipmentCard hand = new EquipmentCard(24, "hand", 900, 3, EquipmentType.ONE_HAND, true, false, true);
					EquipmentCard hands = new EquipmentCard(25, "hands", 900, 3, EquipmentType.TWO_HANDS, false, true, true);
					EquipmentCard other = new EquipmentCard(26, "other", 800, 4, EquipmentType.OTHER, false, false, true);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.addUnequippedItem(hat);
					hard.addUnequippedItem(armor);
					hard.addUnequippedItem(shoes);
					hard.addUnequippedItem(hand);
					hard.addUnequippedItem(hands);
					hard.addUnequippedItem(other);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
					hard.equip(hat);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 400);
					hard.equip(shoes);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 800);
					hard.equip(other);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 1600);
					hard.equip(armor);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 1600);
					hard.equip(hand);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 1600);
					hard.setCheatCards(new OtherDoorCard(Card.OD_CHEAT, "Cheat!"), hands);
					hard.equip(hands);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 1600);
					hard.discard(other);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 1200);
					hard.discard(hand);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 1200);
					hard.removeCheat();
					hard.discard(hands);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 800);
					hard.discard(shoes);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 800);
					hard.discard(hat);
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 800);
					hard.getEquippedItems().clear();
					hard.getUnequippedItems().clear();
					assertEquals(AIManager.getCurseCost(curse, hard, hard.getHandCards()), 0);
				}
			}
		}
	}
	
	private void testGetBadStuffCost() {
		RaceCard elf = new RaceCard(20, "Elf", Race.ELF);
		RaceCard halfling = new RaceCard(21, "Halfling", Race.HALFLING);
		ClassCard cleric = new ClassCard(22, "Cleric", Class.CLERIC);
		ClassCard wizard = new ClassCard(23, "Wizard", Class.WIZARD);
		
		Stack<Card> doorDeck = DoorDeckFactory.buildDeck();
		for (Card card : doorDeck) {
			if (card instanceof MonsterCard) {
				MonsterCard monster = (MonsterCard)card;
				
				if (monster.getID() == Card.M_3872_ORCS) {
					int deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost / 3 + 0);
					easy.addCard(new GoUpLevelCard(30, "Level"));
					easy.addCard(headChicken);
					easy.addItem(new ItemCard(31, "Item", 400));
					easy.addUnequippedItem(tuba);
					easy.addUnequippedItem(boots);
					easy.equip(boots);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, (deathCost / 3 + 0) / 10);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, (deathCost / 3 + 1000 * 2 / 3) / 10);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, (deathCost / 3 + 2000 * 2 / 3) / 10);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, (deathCost / 3 + 3000 * 2 / 3) / 10);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, (deathCost / 3 + 3000 / 6 + 4000 / 2) / 10);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, ((int)(deathCost / 3.0 + 3000.0 / 6.0 + 4000.0 / 6.0 + 5000.0 / 3.0)) / 10);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, ((int)(deathCost / 3.0 + 3000.0 / 6.0 + 4000.0 / 6.0 + 5000.0 / 6.0 + 6000.0 / 6.0)) / 10);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, ((int)(deathCost / 3.0 + (3000 + 4000 + 5000 + 6000) / 6.0)) / 10);
					easy.getHandCards().clear();
					easy.getCarriedItems().clear();
					easy.getEquippedItems().clear();
					easy.getUnequippedItems().clear();
					easy.goDownLevels(10);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost / 3 + 0);
				}
				else if (monster.getID() == Card.M_AMAZON) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					hard.addClassCard(wizard);
					int classValue = AICardEvaluator.getCardValueToPlayer(wizard, hard, hard.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), classValue);
					hard.setSuperMunchkinCard(new OtherDoorCard(Card.OD_SUPER_MUNCHKIN_1, "Super Munchkin"));
					hard.addClassCard(cleric);
					classValue += AICardEvaluator.getCardValueToPlayer(cleric, hard, hard.getHandCards());
					classValue += AICardEvaluator.getCardValueToPlayer(hard.getSuperMunchkinCard(), hard, hard.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), classValue);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), classValue);
					hard.setSuperMunchkinCard(null);
					hard.getClassCards().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.addClassCard(wizard);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.setSuperMunchkinCard(new OtherDoorCard(Card.OD_SUPER_MUNCHKIN_1, "Super Munchkin"));
					medium.addClassCard(cleric);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.setSuperMunchkinCard(null);
					medium.getClassCards().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_BIGFOOT) {
					EquipmentCard hat1 = new EquipmentCard(20, "hat1", 100, 1, EquipmentType.HEADGEAR, false, false, false);
					EquipmentCard hat2 = new EquipmentCard(21, "hat2", 150, 0, EquipmentType.HEADGEAR, true, false, false);
					EquipmentCard armor = new EquipmentCard(22, "armor", 600, 2, EquipmentType.ARMOR, false, false, false);
					EquipmentCard shoes = new EquipmentCard(23, "shoes", 700, 2, EquipmentType.FOOTGEAR, false, false, false);
					EquipmentCard hand = new EquipmentCard(24, "hand", 900, 2, EquipmentType.ONE_HAND, false, false, false);
					EquipmentCard hands = new EquipmentCard(25, "hands", 900, 3, EquipmentType.TWO_HANDS, false, false, false);
					EquipmentCard other = new EquipmentCard(26, "other", 800, 2, EquipmentType.OTHER, false, false, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.getEquippedItems().add(armor);
					medium.getEquippedItems().add(shoes);
					medium.getEquippedItems().add(hand);
					medium.getEquippedItems().add(hands);
					medium.getEquippedItems().add(other);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.addUnequippedItem(hat1);
					medium.addUnequippedItem(hat2);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.equip(hat1);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 400);
					medium.setCheatCards(new OtherDoorCard(Card.OD_CHEAT, "Cheat!"), hat2);
					medium.equip(hat2);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 400 + 150);
					medium.addLastingCurse(headChicken);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 400 + 150 - 300);
					medium.addClassCard(new ClassCard(27, "Thief", Class.THIEF));
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 400 + 150 - 500);
					medium.unequip(hat1);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 150 - 500);
					medium.removeCheat();
					medium.getEquippedItems().clear();
					medium.getUnequippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0 - 500);
					medium.getClassCards().clear();
					medium.removeChickenOnHeadCurse();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_BULLROG) {
					int deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), deathCost * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.addCard(new GoUpLevelCard(30, "Level"));
					easy.addCard(headChicken);
					easy.addItem(new ItemCard(31, "Item", 403));
					easy.addUnequippedItem(tuba);
					easy.addUnequippedItem(boots);
					easy.equip(boots);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()) / 10, (deathCost) / 30);
					assertEquals(AIManager.getBadStuffCost(monster, true, easy, false, easy.getHandCards()) / 10, (deathCost) / 20);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, (deathCost) / 10);
					easy.getHandCards().clear();
					easy.getCarriedItems().clear();
					easy.getEquippedItems().clear();
					easy.getUnequippedItems().clear();
					easy.goDownLevels(10);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
				}
				else if (monster.getID() == Card.M_CRABS) {
					EquipmentCard hat = new EquipmentCard(20, "hat", 100, 1, EquipmentType.HEADGEAR, false, false, false);
					EquipmentCard armor = new EquipmentCard(22, "armor", 600, 1, EquipmentType.ARMOR, false, true, false);
					EquipmentCard shoes = new EquipmentCard(23, "shoes", 700, 2, EquipmentType.FOOTGEAR, false, true, false);
					EquipmentCard hand = new EquipmentCard(24, "hand", 900, 2, EquipmentType.ONE_HAND, false, false, true);
					EquipmentCard hands = new EquipmentCard(25, "hands", 900, 3, EquipmentType.TWO_HANDS, false, true, true);
					EquipmentCard other = new EquipmentCard(26, "other", 800, 4, EquipmentType.OTHER, false, true, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.getEquippedItems().add(hat);
					medium.getEquippedItems().add(hand);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.addUnequippedItem(armor);
					medium.addUnequippedItem(shoes);
					medium.addUnequippedItem(hands);
					medium.addUnequippedItem(other);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.equip(armor);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()) / 10 * 10, 600);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()) / 10 * 10, 600);
					medium.equip(shoes);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()) / 10 * 10, 600 + 800);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()) / 10 * 10, 600 + 800);
					medium.discard(hand);
					medium.equip(hands);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()) / 10 * 10, 600 + 800 + 1200);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()) / 10 * 10, 600 + 800 + 1200);
					medium.equip(other);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()) / 10 * 10, 600 + 800 + 1200 + 1600);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()) / 10 * 10, 600 + 800 + 1200 + 1600);
					medium.unequip(shoes);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()) / 10 * 10, 600 + 1200 + 1600);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()) / 10 * 10, 600 + 1200 + 1600);
					medium.getEquippedItems().clear();
					medium.getUnequippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_DROOLING_SLIME) {
					EquipmentCard shoes1 = new EquipmentCard(20, "shoes1", 200, 0, EquipmentType.FOOTGEAR, false, false, false);
					EquipmentCard shoes2 = new EquipmentCard(21, "shoes2", 500, 1, EquipmentType.FOOTGEAR, true, false, false);
					EquipmentCard hat = new EquipmentCard(22, "hat", 600, 2, EquipmentType.HEADGEAR, false, false, false);
					EquipmentCard armor = new EquipmentCard(23, "armor", 700, 2, EquipmentType.ARMOR, false, false, false);
					EquipmentCard hand = new EquipmentCard(24, "hand", 900, 2, EquipmentType.ONE_HAND, false, false, false);
					EquipmentCard hands = new EquipmentCard(25, "hands", 900, 3, EquipmentType.TWO_HANDS, false, false, false);
					EquipmentCard other = new EquipmentCard(26, "other", 800, 2, EquipmentType.OTHER, false, false, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.getEquippedItems().add(hat);
					medium.getEquippedItems().add(armor);
					medium.getEquippedItems().add(hand);
					medium.getEquippedItems().add(hands);
					medium.getEquippedItems().add(other);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.addUnequippedItem(shoes1);
					medium.addUnequippedItem(shoes2);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000);
					medium.equip(shoes2);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 500);
					medium.setCheatCards(new OtherDoorCard(Card.OD_CHEAT, "Cheat!"), shoes1);
					assertEquals(medium.equip(shoes1), "");
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 500 + 200);
					medium.unequip(shoes2);
					medium.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 200);
					medium.removeCheat();
					medium.getEquippedItems().clear();
					medium.getUnequippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_FACE_SUCKER) {
					EquipmentCard hat1 = new EquipmentCard(20, "hat1", 100, 1, EquipmentType.HEADGEAR, false, false, false);
					EquipmentCard hat2 = new EquipmentCard(21, "hat2", 150, 0, EquipmentType.HEADGEAR, true, false, false);
					EquipmentCard armor = new EquipmentCard(22, "armor", 600, 2, EquipmentType.ARMOR, false, false, false);
					EquipmentCard shoes = new EquipmentCard(23, "shoes", 700, 2, EquipmentType.FOOTGEAR, false, false, false);
					EquipmentCard hand = new EquipmentCard(24, "hand", 900, 2, EquipmentType.ONE_HAND, false, false, false);
					EquipmentCard hands = new EquipmentCard(25, "hands", 900, 3, EquipmentType.TWO_HANDS, false, false, false);
					EquipmentCard other = new EquipmentCard(26, "other", 800, 2, EquipmentType.OTHER, false, false, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.getEquippedItems().add(armor);
					medium.getEquippedItems().add(shoes);
					medium.getEquippedItems().add(hand);
					medium.getEquippedItems().add(hands);
					medium.getEquippedItems().add(other);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.addUnequippedItem(hat1);
					medium.addUnequippedItem(hat2);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.equip(hat1);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 400);
					medium.goUpLevel(false);
					medium.setCheatCards(new OtherDoorCard(Card.OD_CHEAT, "Cheat!"), hat2);
					medium.equip(hat2);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000 + 400 + 150);
					medium.addLastingCurse(headChicken);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000 + 400 + 150 - 300);
					medium.addClassCard(new ClassCard(27, "Thief", Class.THIEF));
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000 + 400 + 150 - 500);
					medium.unequip(hat1);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000 + 150 - 500);
					medium.removeCheat();
					medium.getEquippedItems().clear();
					medium.getUnequippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000 + 0 - 500);
					medium.getClassCards().clear();
					medium.removeChickenOnHeadCurse();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000 + 0);
					medium.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_FLOATING_NOSE) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 3000);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 3000);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}		
				else if (monster.getID() == Card.M_FLYING_FROGS) {
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, false, medium.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, true, medium.getHandCards()), 1000);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 2000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 2000);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 2000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 2000);
					medium.addRaceCard(elf);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 2000);
					medium.addClassCard(wizard);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 2000 * 3 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 2000);
					medium.addUnequippedItem(tuba);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 2000 * 3 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 2000);
					medium.equip(tuba);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 2000 * 2 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 2000);
					medium.addUnequippedItem(boots);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 2000 * 2 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 2000);
					medium.equip(boots);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 2000);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, false, medium.getHandCards()), 2000 * 1 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, true, medium.getHandCards()), 2000);
					medium.setHalfBreedCard(new OtherDoorCard(Card.OD_HALF_BREED_2, "Half-Breed"));
					medium.addRaceCard(halfling);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 2000 * 1 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 2000);
					medium.goDownLevels(2);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 1000 * 1 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000);
					medium.addLastingCurse(headChicken);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 1000 * 2 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, false, medium.getHandCards()), 1000 * 3 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, true, medium.getHandCards()), 1000);
					medium.discard(elf);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, false, medium.getHandCards()), 1000 * 3 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, true, medium.getHandCards()), 1000);
					medium.setHalfBreedCard(null);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, false, medium.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, true, medium.getHandCards()), 1000);
					medium.getEquippedItems().remove(boots);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, false, medium.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, true, medium.getHandCards()), 1000);
					medium.getEquippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, false, medium.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, true, medium.getHandCards()), 1000);
					medium.getRaceCards().clear();
					medium.removeChickenOnHeadCurse();
					medium.getClassCards().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, false, medium.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, true, medium.getHandCards()), 1000);					
					medium.getUnequippedItems().clear();
					medium.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, false, medium.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, false, medium.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, true, medium, true, medium.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_GAZEBO) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_GELATINOUS_OCTAHEDRON) {
					EquipmentCard shoes = new EquipmentCard(20, "shoes", 200, 0, EquipmentType.FOOTGEAR, true, false, false);
					EquipmentCard hat = new EquipmentCard(22, "hat", 600, 1, EquipmentType.HEADGEAR, true, false, false);
					EquipmentCard armor = new EquipmentCard(23, "armor", 700, 2, EquipmentType.ARMOR, false, true, true);
					EquipmentCard hand = new EquipmentCard(24, "hand", 900, 2, EquipmentType.ONE_HAND, true, true, false);
					EquipmentCard hands = new EquipmentCard(25, "hands", 900, 3, EquipmentType.TWO_HANDS, false, false, true);
					EquipmentCard other = new EquipmentCard(26, "other", 800, 4, EquipmentType.OTHER, true, false, false);
					medium.addRaceCard(new RaceCard(27, "Dwarf", Race.DWARF));
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.getEquippedItems().add(armor);
					medium.getUnequippedItems().add(hands);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.addUnequippedItem(shoes);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 200);
					medium.getEquippedItems().add(hat);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()) / 10 * 10, 200 + 600);
					medium.getUnequippedItems().add(hand);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()) / 10 * 10, 200 + 600 + 900);
					medium.getEquippedItems().add(other);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()) / 10 * 10, 200 + 600 + 900 + 1600);
					medium.discard(shoes);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()) / 10 * 10, 600 + 900 + 1600);
					medium.getEquippedItems().clear();
					medium.getUnequippedItems().clear();
					medium.getRaceCards().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_GHOULFIENDS) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 3000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 3000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 3000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					human.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					easy.goDownLevel();
					medium.goDownLevel();
					human.goDownLevel();
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_HARPIES) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 2000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 2000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_HIPPOGRIFF) {
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					easy.addCard(new GoUpLevelCard(30, "Level"));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 1000 * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000);
					easy.addUnequippedItem(bow);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000 + 800);
					easy.addUnequippedItem(ladder);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000 + 800 + 400);
					easy.getEquippedItems().add(fstaff);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000 + 800 + 800);
					easy.addItem(new ItemCard(31, "Item1", 800, 1));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 801 + 800 + 800);
					easy.addCard(new ItemCard(32, "Item2", 0, 9));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 801 + 800 + 800);
					easy.getRaceCards().add(elf);					
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 801 + 800 + 1600);
					hard.addRaceCard(halfling);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 801 + 800 + 400);
					medium.addRaceCard(elf);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 801 + 1600 + 400);				
					human.addClassCard(wizard);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 800 + 1600 + 400);
					easy.getUnequippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 800 + 801 + 950);
					easy.getEquippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 801 + 950 + 950);					
					easy.getCarriedItems().clear();	
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 800 + 800);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 950 + 950);
					easy.setHirelingCard(hireling);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 950 + 950 + AICardEvaluator.getCardValueToPlayer(hireling, easy, easy.getHandCards()));
					medium.getRaceCards().clear();
					human.getRaceCards().clear();
					easy.setHirelingCard(null);
					hard.getRaceCards().clear();
					easy.getRaceCards().clear();
					easy.getHandCards().clear();
					easy.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_INSURANCE_SALESMAN) {
					ItemCard item0 = new ItemCard(30, "Item0", 0, 1);
					ItemCard item1 = new ItemCard(31, "Item1", 100, 2);
					ItemCard item2 = new ItemCard(32, "Item2", 900, 3);
					ItemCard item3 = new ItemCard(33, "Item3", 1000, 30);
					EquipmentCard equip = new EquipmentCard(34, "Equip", 1000, 5, EquipmentType.OTHER, false, false, false);
					easy.addCard(item3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					easy.addItem(item0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 100);
					easy.addItem(item2);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 100 + 903);
					easy.addItem(item3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 3010);
					easy.addUnequippedItem(equip);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000);
					easy.equip(equip);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000);
					easy.addItem(item1);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 903 + 201);
					easy.discard(item2);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000);
					easy.getEquippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 3010);
					easy.discard(item3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 100 + 201);
					easy.getCarriedItems().clear();
					easy.getHandCards().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_KING_TUT) {
					ItemCard item1 = new ItemCard(31, "Item1", 400, 5);
					ItemCard item2 = new ItemCard(32, "Item2", 1000, 4);
					EquipmentCard equip1 = new EquipmentCard(33, "Equip1", 400, 3, EquipmentType.OTHER, false, false, false);
					EquipmentCard equip2 = new EquipmentCard(34, "Equip2", 700, 4, EquipmentType.OTHER, false, false, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					easy.addItem(item1);
					easy.addCard(new GoUpLevelCard(35, "Level"));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000 + 504);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000 + 1000 + 504);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000 + 1000 + 504);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000 + (1000 + 504) * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000 + 1000 + 504);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000 + (1000 + 504) * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000 + 1000 + 504);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, null), 2000 + (800 + 504) * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 2000 + 800 + 504);
					easy.addItem(item2);
					easy.getEquippedItems().add(equip1);
					easy.getUnequippedItems().add(equip2);
					easy.addCard(item1);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000 + (1000 + 504 + 504 + 1004 + 1200 + 1600) * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000 + 1000 + 504 + 504 + 1004 + 1200 + 1600);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, null), 2000 + (800 + 800 + 504 + 1004 + 1200 + 1600) * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 2000 + 800 + 800 + 504 + 1004 + 1200 + 1600);
					easy.goDownLevels(3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000 + 1000 + 504 + 504 + 1004 + 1200 + 1600);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, null), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 1000 + 800 + 800 + 504 + 1004 + 1200 + 1600);
					easy.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000 + 504 + 504 + 1004 + 1200 + 1600);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, null), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 800 + 800 + 504 + 1004 + 1200 + 1600);
					easy.getCarriedItems().clear();
					easy.getEquippedItems().clear();
					easy.getUnequippedItems().clear();
					easy.getHandCards().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);						
				}		
				else if (monster.getID() == Card.M_LAME_GOBLIN) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 3 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 3 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 3 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);					
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 1000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_LARGE_ANGRY_CHICKEN) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_LAWYER) {
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					easy.addCard(new GoUpLevelCard(30, "Level"));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 800);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000);
					easy.addCard(new ItemCard(31, "Item", 400, 5));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 800 + 800);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000 + 504);
					easy.addCard(new ItemCard(32, "Item", 600, 11));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 800 + 800 + 800);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000 + 504 + 1106);
					easy.addCard(new ItemCard(33, "Item", 1200, 2));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 800 + 800 + 800 + 800);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000 + 504 + 1106 + 1202);
					easy.getClassCards().add(new ClassCard(34, "Thief", Class.THIEF));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					easy.getHandCards().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					easy.getClassCards().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_LEPERCHAUN) {
					ItemCard item0 = new ItemCard(30, "Item0", 0, 1);
					ItemCard item1 = new ItemCard(31, "Item1", 100, 2);
					ItemCard item2 = new ItemCard(32, "Item2", 400, 4);
					ItemCard item3 = new ItemCard(33, "Item3", 900, 3);
					EquipmentCard equip1 = new EquipmentCard(34, "Equip1", 200, 1, EquipmentType.OTHER, false, false, false);
					EquipmentCard equip2 = new EquipmentCard(34, "Equip2", 1000, 5, EquipmentType.OTHER, false, false, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					easy.addItem(item0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 100);
					easy.getEquippedItems().add(equip1);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 400 + 100);
					easy.addItem(item2);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 404 + 400);
					easy.addItem(item1);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 404 + 400);
					easy.addUnequippedItem(equip2);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000 + 404);
					easy.addItem(item3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000 + 903);
					easy.getEquippedItems().clear();
					easy.getUnequippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 903 + 404);
					easy.discard(item2);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 903 + 201);
					easy.discard(item1);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 903 + 100);
					easy.getCarriedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_MAUL_RAT) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 1000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_MR_BONES) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 + 1000 * 2 /3);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000 + 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 + 2000 * 2 /3);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000 + 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 + 2000 * 2 /3);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000 + 2000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_NET_TROLL) {
					ItemCard item0 = new ItemCard(30, "Item0", 0, 1);
					ItemCard item1 = new ItemCard(31, "Item1", 100, 2);
					ItemCard item2 = new ItemCard(32, "Item2", 400, 4);
					ItemCard item3 = new ItemCard(33, "Item3", 900, 3);
					EquipmentCard equip1 = new EquipmentCard(34, "Equip1", 200, 1, EquipmentType.OTHER, false, false, false);
					EquipmentCard equip2 = new EquipmentCard(34, "Equip2", 1000, 5, EquipmentType.OTHER, false, false, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					easy.addItem(item0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 100);
					easy.addItem(item3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 903 + 100);
					easy.addUnequippedItem(equip1);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 903 + 400 + 100);
					easy.getEquippedItems().add(equip2);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000 + 903 + 400);
					easy.addItem(item1);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000 + 903 + 400);
					easy.addItem(item2);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000 + 903 + 404);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000);
					medium.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000 + 903);
					easy.goDownLevels(10);
					medium.goDownLevels(10);
					hard.goDownLevels(10);
					easy.getEquippedItems().clear();
					easy.getUnequippedItems().clear();
					easy.getCarriedItems().clear();
				}
				else if (monster.getID() == Card.M_PIT_BULL) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_PLATYCORE) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_PLUTONIUM_DRAGON) {
					int deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.goUpLevels(4, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), deathCost * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.addCard(new GoUpLevelCard(30, "Level"));
					easy.addCard(headChicken);
					easy.addItem(new ItemCard(31, "Item", 402));
					easy.addUnequippedItem(tuba);
					easy.addUnequippedItem(boots);
					easy.equip(boots);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, deathCost / 10);
					easy.getHandCards().clear();
					easy.getCarriedItems().clear();
					easy.getEquippedItems().clear();
					easy.getUnequippedItems().clear();
					easy.goDownLevels(10);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
				}
				else if (monster.getID() == Card.M_POTTED_PLANT) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_SHRIEKING_GEEK) {
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.addRaceCard(halfling);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 50);
					medium.setHalfBreedCard(new OtherDoorCard(Card.OD_HALF_BREED_1, "Half-Breed"));
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 50 + 300);
					medium.addRaceCard(elf);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 50 + 300 + 450);
					medium.getEquippedItems().add(bow);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 50 + 300 + 1250);
					medium.addClassCard(wizard);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 50 + 300 + 1250 + 500);
					medium.setSuperMunchkinCard(new OtherDoorCard(Card.OD_SUPER_MUNCHKIN_1, "Super Munchkin"));
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 50 + 300 + 1250 + 500 + 100);
					medium.addClassCard(cleric);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 50 + 300 + 1250 + 500 + 100 + 500);
					medium.addUnequippedItem(noWizard);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 50 + 300 + 1250 + -100 + 100 + 500);
					medium.getRaceCards().clear();
					medium.setHalfBreedCard(null);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), -100 + 100 + 500);
					medium.getClassCards().clear();
					medium.setSuperMunchkinCard(null);
					medium.getEquippedItems().clear();
					medium.getUnequippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
				}		
				else if (monster.getID() == Card.M_SNAILS_OF_SPEED) {
					ItemCard item0 = new ItemCard(30, "Item0", 0, 1);
					ItemCard item1 = new ItemCard(31, "Item1", 100, 2);
					ItemCard item2 = new ItemCard(32, "Item2", 400, 4);
					ItemCard item3 = new ItemCard(33, "Item3", 900, 3);
					EquipmentCard equip1 = new EquipmentCard(34, "Equip1", 200, 1, EquipmentType.OTHER, false, false, false);
					EquipmentCard equip2 = new EquipmentCard(34, "Equip2", 1000, 5, EquipmentType.OTHER, false, false, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					easy.addCard(new GoUpLevelCard(35, "Level"));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, null), 800);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 800);
					easy.addRaceCard(elf);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, null), 800 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 800);
					easy.getRaceCards().clear();
					easy.addItem(item3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 903 + 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 800 + 903 * 5 / 6);
					easy.getEquippedItems().add(equip2);
					int lossValue = 903 + 1000 * 5 / 6 + 2000 * 2 / 3;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), lossValue);
					easy.getUnequippedItems().add(equip1);
					lossValue = 400 + 903 * 5 / 6 + 1000 * 2 / 3 + 2000 / 2;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), lossValue);
					easy.addItem(item0);
					lossValue = 100 + 400 * 5 / 6 + 903 * 2 / 3 + 1000 / 2 + 2000 / 3;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), lossValue);
					easy.addCard(item1);
					lossValue = 100 + 201 * 5 / 6 + 400 * 2 / 3 + 903 / 2  + 1000 / 3 + 2000 / 6;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), lossValue);
					easy.addItem(item2);
					lossValue =  100 + 201 * 5 / 6 + 400 * 2 / 3 + 404 / 2 + 903 / 3  + 1000 / 6;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), lossValue);
					easy.addLastingCurse(headChicken);
					lossValue =  100 + 201 * 2 / 3 + 400 / 2 + 404 / 3 + 903 / 6;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), lossValue);
					easy.discard(item3);
					lossValue =  100 + 201 * 2 / 3 + 400 / 2 + 404 / 3 + 1000 / 6;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), lossValue);
					lossValue =  100 + 400 * 2 / 3 + 404 / 2 + 700 / 3 + 800 / 6;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), lossValue);
					easy.getHandCards().removeFirst();
					lossValue =  100 + 201 * 2 / 3 + 400 / 2 + 404 / 3 + 2000 / 6;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), lossValue);
					easy.getHandCards().clear();
					lossValue =  100 + 400 * 2 / 3 + 404 / 2 + 2000 / 3;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), lossValue);
					easy.getUnequippedItems().clear();
					lossValue =  100 + 404 * 2 / 3 + 2000 / 2;
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), lossValue);
					easy.getCarriedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, null), 2000);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 2000);
					easy.removeChickenOnHeadCurse();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, null), 2000);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, null), 2000);
					easy.getEquippedItems().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_SQUIDZILLA) {
					int deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.goUpLevels(3, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), deathCost * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.addCard(new GoUpLevelCard(30, "Level"));
					easy.addCard(headChicken);
					easy.addItem(new ItemCard(31, "Item", 402));
					easy.addUnequippedItem(tuba);
					easy.addUnequippedItem(boots);
					easy.equip(boots);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, deathCost / 10);
					easy.getHandCards().clear();
					easy.getCarriedItems().clear();
					easy.getEquippedItems().clear();
					easy.getUnequippedItems().clear();
					easy.goDownLevels(10);
					easy.addRaceCard(elf);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), deathCost / 2);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.getRaceCards().clear();
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
				}
				else if (monster.getID() == Card.M_STONE_GOLEM) {
					int deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.goUpLevels(10, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.addRaceCard(halfling);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), deathCost * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.addCard(new GoUpLevelCard(30, "Level"));
					easy.addCard(headChicken);
					easy.addItem(new ItemCard(31, "Item", 402));
					easy.addUnequippedItem(tuba);
					easy.addUnequippedItem(boots);
					easy.equip(boots);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, deathCost / 10);
					easy.getHandCards().clear();
					easy.getCarriedItems().clear();
					easy.getEquippedItems().clear();
					easy.getUnequippedItems().clear();
					easy.goDownLevels(10);
					easy.getRaceCards().clear();
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
				}
				else if (monster.getID() == Card.M_THE_NOTHING) {
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, null), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
					medium.addCard(new GoUpLevelCard(30, "Level"));
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, null), 800);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000);
					medium.addCard(new ItemCard(31, "Item1", 1));
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, null), 800 + 800);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000 + 1);
					medium.addCard(new ItemCard(32, "Item2", 200, 1));
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, null), 800 * 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000 + 1 + 201);
					medium.addCard(new ItemCard(33, "Item3", 500, 8));
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, null), 800 * 4);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000 + 1 + 201 + 805);
					medium.addCard(new ItemCard(34, "Item4", 0, 9));
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, null), 800 * 5);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 1000 + 1 + 201 + 805 + 900);
					medium.getHandCards().clear();
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, null), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, medium, true, medium.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_TONGUE_DEMON) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.addRaceCard(elf);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 / 2);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 / 2);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 3000 / 2);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 3000 / 2);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					hard.setHalfBreedCard(new OtherDoorCard(Card.OD_HALF_BREED_2, "Half-Breed"));
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 / 2);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.addRaceCard(halfling);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 3000 * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.getRaceCards().clear();
					hard.setHalfBreedCard(null);
				}
				else if (monster.getID() == Card.M_UNDEAD_HORSE) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
				}
				else if (monster.getID() == Card.M_UNSPEAKABLY_AWFUL_INDESCRIBABLE_HORROR) {					
					int deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), deathCost * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.goUpLevels(7, false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), deathCost * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.addCard(new GoUpLevelCard(30, "Level"));
					easy.addCard(headChicken);
					easy.addItem(new ItemCard(31, "Item", 402));
					easy.addUnequippedItem(tuba);
					easy.addUnequippedItem(boots);
					easy.equip(boots);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()) / 10, deathCost / 10);
					easy.addClassCard(wizard);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 500);
					easy.setSuperMunchkinCard(new OtherDoorCard(Card.OD_SUPER_MUNCHKIN_1, "Super Munchkin"));
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 500 + 100);
					easy.addClassCard(cleric);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 500 + 100);
					easy.getHandCards().clear();
					easy.getCarriedItems().clear();
					easy.getEquippedItems().clear();
					easy.getUnequippedItems().clear();
					easy.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), (500 + 100) / 2);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 500 + 100);
					easy.discard(wizard);
					deathCost = AIManager.getDeathCost(easy, easy.getHandCards());
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), deathCost * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), deathCost);
					easy.getClassCards().clear();
					easy.setSuperMunchkinCard(null);
				}
				else if (monster.getID() == Card.M_WANNABE_VAMPIRE) {
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 1000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 1000);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 1000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 1000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 2000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 2000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 3000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 3000 * 4 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 3000);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 3000 * 5 / 6);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 3000);					
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.addClassCard(cleric);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, true, hard, true, hard.getHandCards()), 0);					
					hard.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, false, hard.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, hard, true, hard.getHandCards()), 0);
					hard.getClassCards().clear();
				}
				else if (monster.getID() == Card.M_WIGHT_BROTHERS) {
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 1000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 2000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000 + 1000 * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 3000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000 + 2000 * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 4000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000 + 3000 * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 5000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000 + 4000 * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 6000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000 + 5000 * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 7000);
					easy.goUpLevel(false);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 2000 + 6000 * 2 / 3);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 8000);
					easy.goDownLevels(10);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, false, easy.getHandCards()), 0);
					assertEquals(AIManager.getBadStuffCost(monster, false, easy, true, easy.getHandCards()), 0);
				}
				else
					fail("Unknown MonsterCard (" + monster.getID() + "):" + monster.toString());
			}
		}
	}
}
